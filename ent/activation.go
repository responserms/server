// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/responserms/server/ent/activation"
)

// Activation is the model entity for the Activation schema.
type Activation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// InternalComments holds the value of the "internal_comments" field.
	InternalComments *string `json:"internal_comments,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments *string `json:"comments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivationQuery when eager-loading is set.
	Edges ActivationEdges `json:"edges"`
}

// ActivationEdges holds the relations/edges for other nodes in the graph.
type ActivationEdges struct {
	// User holds the value of the user edge.
	User []*User
	// Actor holds the value of the actor edge.
	Actor []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e ActivationEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ActorOrErr returns the Actor value or an error if the edge
// was not loaded in eager-loading.
func (e ActivationEdges) ActorOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Actor, nil
	}
	return nil, &NotLoadedError{edge: "actor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case activation.FieldID:
			values[i] = &sql.NullInt64{}
		case activation.FieldInternalComments, activation.FieldComments:
			values[i] = &sql.NullString{}
		case activation.FieldCreatedAt, activation.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Activation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activation fields.
func (a *Activation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case activation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case activation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case activation.FieldInternalComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_comments", values[i])
			} else if value.Valid {
				a.InternalComments = new(string)
				*a.InternalComments = value.String
			}
		case activation.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				a.Comments = new(string)
				*a.Comments = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the user edge of the Activation.
func (a *Activation) QueryUser() *UserQuery {
	return (&ActivationClient{config: a.config}).QueryUser(a)
}

// QueryActor queries the actor edge of the Activation.
func (a *Activation) QueryActor() *UserQuery {
	return (&ActivationClient{config: a.config}).QueryActor(a)
}

// Update returns a builder for updating this Activation.
// Note that, you need to call Activation.Unwrap() before calling this method, if this Activation
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Activation) Update() *ActivationUpdateOne {
	return (&ActivationClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Activation) Unwrap() *Activation {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Activation is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Activation) String() string {
	var builder strings.Builder
	builder.WriteString("Activation(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	if v := a.InternalComments; v != nil {
		builder.WriteString(", internal_comments=")
		builder.WriteString(*v)
	}
	if v := a.Comments; v != nil {
		builder.WriteString(", comments=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Activations is a parsable slice of Activation.
type Activations []*Activation

func (a Activations) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
