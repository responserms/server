// Code generated by entc, DO NOT EDIT.

package activation

import (
	"time"
)

const (
	// Label holds the string label denoting the activation type in the database.
	Label = "activation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldInternalComments holds the string denoting the internal_comments field in the database.
	FieldInternalComments = "internal_comments"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"

	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeActor holds the string denoting the actor edge name in mutations.
	EdgeActor = "actor"

	// Table holds the table name of the activation in the database.
	Table = "activations"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "users"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "activation_user"
	// ActorTable is the table the holds the actor relation/edge. The primary key declared below.
	ActorTable = "activation_actor"
	// ActorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ActorInverseTable = "users"
)

// Columns holds all SQL columns for activation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldInternalComments,
	FieldComments,
}

var (
	// ActorPrimaryKey and ActorColumn2 are the table columns denoting the
	// primary key for the actor relation (M2M).
	ActorPrimaryKey = []string{"activation_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
)
