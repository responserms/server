// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/activation"
	"github.com/responserms/server/ent/user"
)

// ActivationCreate is the builder for creating a Activation entity.
type ActivationCreate struct {
	config
	mutation *ActivationMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (ac *ActivationCreate) SetCreatedAt(t time.Time) *ActivationCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ac *ActivationCreate) SetNillableCreatedAt(t *time.Time) *ActivationCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the updated_at field.
func (ac *ActivationCreate) SetUpdatedAt(t time.Time) *ActivationCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ac *ActivationCreate) SetNillableUpdatedAt(t *time.Time) *ActivationCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetInternalComments sets the internal_comments field.
func (ac *ActivationCreate) SetInternalComments(s string) *ActivationCreate {
	ac.mutation.SetInternalComments(s)
	return ac
}

// SetNillableInternalComments sets the internal_comments field if the given value is not nil.
func (ac *ActivationCreate) SetNillableInternalComments(s *string) *ActivationCreate {
	if s != nil {
		ac.SetInternalComments(*s)
	}
	return ac
}

// SetComments sets the comments field.
func (ac *ActivationCreate) SetComments(s string) *ActivationCreate {
	ac.mutation.SetComments(s)
	return ac
}

// SetNillableComments sets the comments field if the given value is not nil.
func (ac *ActivationCreate) SetNillableComments(s *string) *ActivationCreate {
	if s != nil {
		ac.SetComments(*s)
	}
	return ac
}

// AddUserIDs adds the user edge to User by ids.
func (ac *ActivationCreate) AddUserIDs(ids ...int) *ActivationCreate {
	ac.mutation.AddUserIDs(ids...)
	return ac
}

// AddUser adds the user edges to User.
func (ac *ActivationCreate) AddUser(u ...*User) *ActivationCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ac.AddUserIDs(ids...)
}

// AddActorIDs adds the actor edge to User by ids.
func (ac *ActivationCreate) AddActorIDs(ids ...int) *ActivationCreate {
	ac.mutation.AddActorIDs(ids...)
	return ac
}

// AddActor adds the actor edges to User.
func (ac *ActivationCreate) AddActor(u ...*User) *ActivationCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ac.AddActorIDs(ids...)
}

// Mutation returns the ActivationMutation object of the builder.
func (ac *ActivationCreate) Mutation() *ActivationMutation {
	return ac.mutation
}

// Save creates the Activation in the database.
func (ac *ActivationCreate) Save(ctx context.Context) (*Activation, error) {
	var (
		err  error
		node *Activation
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivationCreate) SaveX(ctx context.Context) *Activation {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ac *ActivationCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := activation.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := activation.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActivationCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (ac *ActivationCreate) sqlSave(ctx context.Context) (*Activation, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *ActivationCreate) createSpec() (*Activation, *sqlgraph.CreateSpec) {
	var (
		_node = &Activation{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: activation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activation.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activation.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activation.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.InternalComments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activation.FieldInternalComments,
		})
		_node.InternalComments = &value
	}
	if value, ok := ac.mutation.Comments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activation.FieldComments,
		})
		_node.Comments = &value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activation.UserTable,
			Columns: []string{activation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activation.ActorTable,
			Columns: activation.ActorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActivationCreateBulk is the builder for creating a bulk of Activation entities.
type ActivationCreateBulk struct {
	config
	builders []*ActivationCreate
}

// Save creates the Activation entities in the database.
func (acb *ActivationCreateBulk) Save(ctx context.Context) ([]*Activation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Activation, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (acb *ActivationCreateBulk) SaveX(ctx context.Context) []*Activation {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
