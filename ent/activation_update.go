// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/activation"
	"github.com/responserms/server/ent/predicate"
	"github.com/responserms/server/ent/user"
)

// ActivationUpdate is the builder for updating Activation entities.
type ActivationUpdate struct {
	config
	hooks    []Hook
	mutation *ActivationMutation
}

// Where adds a new predicate for the builder.
func (au *ActivationUpdate) Where(ps ...predicate.Activation) *ActivationUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetUpdatedAt sets the updated_at field.
func (au *ActivationUpdate) SetUpdatedAt(t time.Time) *ActivationUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetInternalComments sets the internal_comments field.
func (au *ActivationUpdate) SetInternalComments(s string) *ActivationUpdate {
	au.mutation.SetInternalComments(s)
	return au
}

// SetNillableInternalComments sets the internal_comments field if the given value is not nil.
func (au *ActivationUpdate) SetNillableInternalComments(s *string) *ActivationUpdate {
	if s != nil {
		au.SetInternalComments(*s)
	}
	return au
}

// ClearInternalComments clears the value of internal_comments.
func (au *ActivationUpdate) ClearInternalComments() *ActivationUpdate {
	au.mutation.ClearInternalComments()
	return au
}

// SetComments sets the comments field.
func (au *ActivationUpdate) SetComments(s string) *ActivationUpdate {
	au.mutation.SetComments(s)
	return au
}

// SetNillableComments sets the comments field if the given value is not nil.
func (au *ActivationUpdate) SetNillableComments(s *string) *ActivationUpdate {
	if s != nil {
		au.SetComments(*s)
	}
	return au
}

// ClearComments clears the value of comments.
func (au *ActivationUpdate) ClearComments() *ActivationUpdate {
	au.mutation.ClearComments()
	return au
}

// AddUserIDs adds the user edge to User by ids.
func (au *ActivationUpdate) AddUserIDs(ids ...int) *ActivationUpdate {
	au.mutation.AddUserIDs(ids...)
	return au
}

// AddUser adds the user edges to User.
func (au *ActivationUpdate) AddUser(u ...*User) *ActivationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.AddUserIDs(ids...)
}

// AddActorIDs adds the actor edge to User by ids.
func (au *ActivationUpdate) AddActorIDs(ids ...int) *ActivationUpdate {
	au.mutation.AddActorIDs(ids...)
	return au
}

// AddActor adds the actor edges to User.
func (au *ActivationUpdate) AddActor(u ...*User) *ActivationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.AddActorIDs(ids...)
}

// Mutation returns the ActivationMutation object of the builder.
func (au *ActivationUpdate) Mutation() *ActivationMutation {
	return au.mutation
}

// ClearUser clears all "user" edges to type User.
func (au *ActivationUpdate) ClearUser() *ActivationUpdate {
	au.mutation.ClearUser()
	return au
}

// RemoveUserIDs removes the user edge to User by ids.
func (au *ActivationUpdate) RemoveUserIDs(ids ...int) *ActivationUpdate {
	au.mutation.RemoveUserIDs(ids...)
	return au
}

// RemoveUser removes user edges to User.
func (au *ActivationUpdate) RemoveUser(u ...*User) *ActivationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.RemoveUserIDs(ids...)
}

// ClearActor clears all "actor" edges to type User.
func (au *ActivationUpdate) ClearActor() *ActivationUpdate {
	au.mutation.ClearActor()
	return au
}

// RemoveActorIDs removes the actor edge to User by ids.
func (au *ActivationUpdate) RemoveActorIDs(ids ...int) *ActivationUpdate {
	au.mutation.RemoveActorIDs(ids...)
	return au
}

// RemoveActor removes actor edges to User.
func (au *ActivationUpdate) RemoveActor(u ...*User) *ActivationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.RemoveActorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ActivationUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := activation.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *ActivationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activation.Table,
			Columns: activation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activation.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activation.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.InternalComments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activation.FieldInternalComments,
		})
	}
	if au.mutation.InternalCommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activation.FieldInternalComments,
		})
	}
	if value, ok := au.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activation.FieldComments,
		})
	}
	if au.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activation.FieldComments,
		})
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activation.UserTable,
			Columns: []string{activation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedUserIDs(); len(nodes) > 0 && !au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activation.UserTable,
			Columns: []string{activation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activation.UserTable,
			Columns: []string{activation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activation.ActorTable,
			Columns: activation.ActorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedActorIDs(); len(nodes) > 0 && !au.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activation.ActorTable,
			Columns: activation.ActorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activation.ActorTable,
			Columns: activation.ActorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActivationUpdateOne is the builder for updating a single Activation entity.
type ActivationUpdateOne struct {
	config
	hooks    []Hook
	mutation *ActivationMutation
}

// SetUpdatedAt sets the updated_at field.
func (auo *ActivationUpdateOne) SetUpdatedAt(t time.Time) *ActivationUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetInternalComments sets the internal_comments field.
func (auo *ActivationUpdateOne) SetInternalComments(s string) *ActivationUpdateOne {
	auo.mutation.SetInternalComments(s)
	return auo
}

// SetNillableInternalComments sets the internal_comments field if the given value is not nil.
func (auo *ActivationUpdateOne) SetNillableInternalComments(s *string) *ActivationUpdateOne {
	if s != nil {
		auo.SetInternalComments(*s)
	}
	return auo
}

// ClearInternalComments clears the value of internal_comments.
func (auo *ActivationUpdateOne) ClearInternalComments() *ActivationUpdateOne {
	auo.mutation.ClearInternalComments()
	return auo
}

// SetComments sets the comments field.
func (auo *ActivationUpdateOne) SetComments(s string) *ActivationUpdateOne {
	auo.mutation.SetComments(s)
	return auo
}

// SetNillableComments sets the comments field if the given value is not nil.
func (auo *ActivationUpdateOne) SetNillableComments(s *string) *ActivationUpdateOne {
	if s != nil {
		auo.SetComments(*s)
	}
	return auo
}

// ClearComments clears the value of comments.
func (auo *ActivationUpdateOne) ClearComments() *ActivationUpdateOne {
	auo.mutation.ClearComments()
	return auo
}

// AddUserIDs adds the user edge to User by ids.
func (auo *ActivationUpdateOne) AddUserIDs(ids ...int) *ActivationUpdateOne {
	auo.mutation.AddUserIDs(ids...)
	return auo
}

// AddUser adds the user edges to User.
func (auo *ActivationUpdateOne) AddUser(u ...*User) *ActivationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.AddUserIDs(ids...)
}

// AddActorIDs adds the actor edge to User by ids.
func (auo *ActivationUpdateOne) AddActorIDs(ids ...int) *ActivationUpdateOne {
	auo.mutation.AddActorIDs(ids...)
	return auo
}

// AddActor adds the actor edges to User.
func (auo *ActivationUpdateOne) AddActor(u ...*User) *ActivationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.AddActorIDs(ids...)
}

// Mutation returns the ActivationMutation object of the builder.
func (auo *ActivationUpdateOne) Mutation() *ActivationMutation {
	return auo.mutation
}

// ClearUser clears all "user" edges to type User.
func (auo *ActivationUpdateOne) ClearUser() *ActivationUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// RemoveUserIDs removes the user edge to User by ids.
func (auo *ActivationUpdateOne) RemoveUserIDs(ids ...int) *ActivationUpdateOne {
	auo.mutation.RemoveUserIDs(ids...)
	return auo
}

// RemoveUser removes user edges to User.
func (auo *ActivationUpdateOne) RemoveUser(u ...*User) *ActivationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.RemoveUserIDs(ids...)
}

// ClearActor clears all "actor" edges to type User.
func (auo *ActivationUpdateOne) ClearActor() *ActivationUpdateOne {
	auo.mutation.ClearActor()
	return auo
}

// RemoveActorIDs removes the actor edge to User by ids.
func (auo *ActivationUpdateOne) RemoveActorIDs(ids ...int) *ActivationUpdateOne {
	auo.mutation.RemoveActorIDs(ids...)
	return auo
}

// RemoveActor removes actor edges to User.
func (auo *ActivationUpdateOne) RemoveActor(u ...*User) *ActivationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.RemoveActorIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (auo *ActivationUpdateOne) Save(ctx context.Context) (*Activation, error) {
	var (
		err  error
		node *Activation
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivationUpdateOne) SaveX(ctx context.Context) *Activation {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ActivationUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := activation.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *ActivationUpdateOne) sqlSave(ctx context.Context) (_node *Activation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activation.Table,
			Columns: activation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activation.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Activation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activation.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.InternalComments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activation.FieldInternalComments,
		})
	}
	if auo.mutation.InternalCommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activation.FieldInternalComments,
		})
	}
	if value, ok := auo.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activation.FieldComments,
		})
	}
	if auo.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activation.FieldComments,
		})
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activation.UserTable,
			Columns: []string{activation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedUserIDs(); len(nodes) > 0 && !auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activation.UserTable,
			Columns: []string{activation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activation.UserTable,
			Columns: []string{activation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activation.ActorTable,
			Columns: activation.ActorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedActorIDs(); len(nodes) > 0 && !auo.mutation.ActorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activation.ActorTable,
			Columns: activation.ActorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   activation.ActorTable,
			Columns: activation.ActorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Activation{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
