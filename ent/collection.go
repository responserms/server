// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *ActivationQuery) CollectFields(ctx context.Context, satisfies ...string) *ActivationQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return a
}

func (a *ActivationQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ActivationQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "actor":
			a = a.WithActor(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		case "user":
			a = a.WithUser(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return a
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (as *AuthSessionQuery) CollectFields(ctx context.Context, satisfies ...string) *AuthSessionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		as = as.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return as
}

func (as *AuthSessionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AuthSessionQuery {
	return as
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ml *MapLayerQuery) CollectFields(ctx context.Context, satisfies ...string) *MapLayerQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ml = ml.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ml
}

func (ml *MapLayerQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MapLayerQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "map_type":
			ml = ml.WithMapType(func(query *MapTypeQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ml
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (mt *MapTypeQuery) CollectFields(ctx context.Context, satisfies ...string) *MapTypeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		mt = mt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return mt
}

func (mt *MapTypeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MapTypeQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "map_layers":
			mt = mt.WithMapLayers(func(query *MapLayerQuery) {
				query.collectField(ctx, field)
			})
		case "servers":
			mt = mt.WithServers(func(query *ServerQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return mt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (m *MetadataQuery) CollectFields(ctx context.Context, satisfies ...string) *MetadataQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		m = m.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return m
}

func (m *MetadataQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *MetadataQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "map_type":
			m = m.WithMapType(func(query *MapTypeQuery) {
				query.collectField(ctx, field)
			})
		case "user":
			m = m.WithUser(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return m
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pl *PlayerQuery) CollectFields(ctx context.Context, satisfies ...string) *PlayerQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pl = pl.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pl
}

func (pl *PlayerQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *PlayerQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "identifiers":
			pl = pl.WithIdentifiers(func(query *PlayerIdentifierQuery) {
				query.collectField(ctx, field)
			})
		case "servers":
			pl = pl.WithServers(func(query *ServerQuery) {
				query.collectField(ctx, field)
			})
		case "user":
			pl = pl.WithUser(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pl
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pi *PlayerIdentifierQuery) CollectFields(ctx context.Context, satisfies ...string) *PlayerIdentifierQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pi = pi.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pi
}

func (pi *PlayerIdentifierQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *PlayerIdentifierQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "player":
			pi = pi.WithPlayer(func(query *PlayerQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return pi
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *ServerQuery) CollectFields(ctx context.Context, satisfies ...string) *ServerQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *ServerQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ServerQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "map_type":
			s = s.WithMapType(func(query *MapTypeQuery) {
				query.collectField(ctx, field)
			})
		case "players":
			s = s.WithPlayers(func(query *PlayerQuery) {
				query.collectField(ctx, field)
			})
		case "server_type":
			s = s.WithServerType(func(query *ServerTypeQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (st *ServerTypeQuery) CollectFields(ctx context.Context, satisfies ...string) *ServerTypeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		st = st.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return st
}

func (st *ServerTypeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ServerTypeQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "servers":
			st = st.WithServers(func(query *ServerQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return st
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SessionQuery) CollectFields(ctx context.Context, satisfies ...string) *SessionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *SessionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *SessionQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "token":
			s = s.WithToken(func(query *TokenQuery) {
				query.collectField(ctx, field)
			})
		case "user":
			s = s.WithUser(func(query *UserQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TokenQuery) CollectFields(ctx context.Context, satisfies ...string) *TokenQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TokenQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TokenQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "session":
			t = t.WithSession(func(query *SessionQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "activation":
			u = u.WithActivation(func(query *ActivationQuery) {
				query.collectField(ctx, field)
			})
		case "activations":
			u = u.WithActivations(func(query *ActivationQuery) {
				query.collectField(ctx, field)
			})
		case "players":
			u = u.WithPlayers(func(query *PlayerQuery) {
				query.collectField(ctx, field)
			})
		case "sessions":
			u = u.WithSessions(func(query *SessionQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return u
}
