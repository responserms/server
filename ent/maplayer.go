// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/responserms/server/ent/maplayer"
	"github.com/responserms/server/ent/maptype"
	"github.com/responserms/server/ent/metadata"
)

// MapLayer is the model entity for the MapLayer schema.
type MapLayer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URLTemplate holds the value of the "url_template" field.
	URLTemplate string `json:"url_template,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MapLayerQuery when eager-loading is set.
	Edges              MapLayerEdges `json:"edges"`
	map_layer_metadata *int
	map_layer_map_type *int
}

// MapLayerEdges holds the relations/edges for other nodes in the graph.
type MapLayerEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata
	// MapType holds the value of the map_type edge.
	MapType *MapType
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MapLayerEdges) MetadataOrErr() (*Metadata, error) {
	if e.loadedTypes[0] {
		if e.Metadata == nil {
			// The edge metadata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metadata.Label}
		}
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// MapTypeOrErr returns the MapType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MapLayerEdges) MapTypeOrErr() (*MapType, error) {
	if e.loadedTypes[1] {
		if e.MapType == nil {
			// The edge map_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: maptype.Label}
		}
		return e.MapType, nil
	}
	return nil, &NotLoadedError{edge: "map_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MapLayer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case maplayer.FieldIsPublic:
			values[i] = &sql.NullBool{}
		case maplayer.FieldID:
			values[i] = &sql.NullInt64{}
		case maplayer.FieldName, maplayer.FieldURLTemplate:
			values[i] = &sql.NullString{}
		case maplayer.FieldCreatedAt, maplayer.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		case maplayer.ForeignKeys[0]: // map_layer_metadata
			values[i] = &sql.NullInt64{}
		case maplayer.ForeignKeys[1]: // map_layer_map_type
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type MapLayer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MapLayer fields.
func (ml *MapLayer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case maplayer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ml.ID = int(value.Int64)
		case maplayer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ml.CreatedAt = value.Time
			}
		case maplayer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ml.UpdatedAt = value.Time
			}
		case maplayer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ml.Name = value.String
			}
		case maplayer.FieldURLTemplate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_template", values[i])
			} else if value.Valid {
				ml.URLTemplate = value.String
			}
		case maplayer.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				ml.IsPublic = value.Bool
			}
		case maplayer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field map_layer_metadata", value)
			} else if value.Valid {
				ml.map_layer_metadata = new(int)
				*ml.map_layer_metadata = int(value.Int64)
			}
		case maplayer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field map_layer_map_type", value)
			} else if value.Valid {
				ml.map_layer_map_type = new(int)
				*ml.map_layer_map_type = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetadata queries the metadata edge of the MapLayer.
func (ml *MapLayer) QueryMetadata() *MetadataQuery {
	return (&MapLayerClient{config: ml.config}).QueryMetadata(ml)
}

// QueryMapType queries the map_type edge of the MapLayer.
func (ml *MapLayer) QueryMapType() *MapTypeQuery {
	return (&MapLayerClient{config: ml.config}).QueryMapType(ml)
}

// Update returns a builder for updating this MapLayer.
// Note that, you need to call MapLayer.Unwrap() before calling this method, if this MapLayer
// was returned from a transaction, and the transaction was committed or rolled back.
func (ml *MapLayer) Update() *MapLayerUpdateOne {
	return (&MapLayerClient{config: ml.config}).UpdateOne(ml)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ml *MapLayer) Unwrap() *MapLayer {
	tx, ok := ml.config.driver.(*txDriver)
	if !ok {
		panic("ent: MapLayer is not a transactional entity")
	}
	ml.config.driver = tx.drv
	return ml
}

// String implements the fmt.Stringer.
func (ml *MapLayer) String() string {
	var builder strings.Builder
	builder.WriteString("MapLayer(")
	builder.WriteString(fmt.Sprintf("id=%v", ml.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ml.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ml.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(ml.Name)
	builder.WriteString(", url_template=")
	builder.WriteString(ml.URLTemplate)
	builder.WriteString(", is_public=")
	builder.WriteString(fmt.Sprintf("%v", ml.IsPublic))
	builder.WriteByte(')')
	return builder.String()
}

// MapLayers is a parsable slice of MapLayer.
type MapLayers []*MapLayer

func (ml MapLayers) config(cfg config) {
	for _i := range ml {
		ml[_i].config = cfg
	}
}
