// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/maplayer"
	"github.com/responserms/server/ent/maptype"
	"github.com/responserms/server/ent/metadata"
)

// MapLayerCreate is the builder for creating a MapLayer entity.
type MapLayerCreate struct {
	config
	mutation *MapLayerMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (mlc *MapLayerCreate) SetCreatedAt(t time.Time) *MapLayerCreate {
	mlc.mutation.SetCreatedAt(t)
	return mlc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mlc *MapLayerCreate) SetNillableCreatedAt(t *time.Time) *MapLayerCreate {
	if t != nil {
		mlc.SetCreatedAt(*t)
	}
	return mlc
}

// SetUpdatedAt sets the updated_at field.
func (mlc *MapLayerCreate) SetUpdatedAt(t time.Time) *MapLayerCreate {
	mlc.mutation.SetUpdatedAt(t)
	return mlc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mlc *MapLayerCreate) SetNillableUpdatedAt(t *time.Time) *MapLayerCreate {
	if t != nil {
		mlc.SetUpdatedAt(*t)
	}
	return mlc
}

// SetName sets the name field.
func (mlc *MapLayerCreate) SetName(s string) *MapLayerCreate {
	mlc.mutation.SetName(s)
	return mlc
}

// SetURLTemplate sets the url_template field.
func (mlc *MapLayerCreate) SetURLTemplate(s string) *MapLayerCreate {
	mlc.mutation.SetURLTemplate(s)
	return mlc
}

// SetIsPublic sets the is_public field.
func (mlc *MapLayerCreate) SetIsPublic(b bool) *MapLayerCreate {
	mlc.mutation.SetIsPublic(b)
	return mlc
}

// SetMetadataID sets the metadata edge to Metadata by id.
func (mlc *MapLayerCreate) SetMetadataID(id int) *MapLayerCreate {
	mlc.mutation.SetMetadataID(id)
	return mlc
}

// SetNillableMetadataID sets the metadata edge to Metadata by id if the given value is not nil.
func (mlc *MapLayerCreate) SetNillableMetadataID(id *int) *MapLayerCreate {
	if id != nil {
		mlc = mlc.SetMetadataID(*id)
	}
	return mlc
}

// SetMetadata sets the metadata edge to Metadata.
func (mlc *MapLayerCreate) SetMetadata(m *Metadata) *MapLayerCreate {
	return mlc.SetMetadataID(m.ID)
}

// SetMapTypeID sets the map_type edge to MapType by id.
func (mlc *MapLayerCreate) SetMapTypeID(id int) *MapLayerCreate {
	mlc.mutation.SetMapTypeID(id)
	return mlc
}

// SetNillableMapTypeID sets the map_type edge to MapType by id if the given value is not nil.
func (mlc *MapLayerCreate) SetNillableMapTypeID(id *int) *MapLayerCreate {
	if id != nil {
		mlc = mlc.SetMapTypeID(*id)
	}
	return mlc
}

// SetMapType sets the map_type edge to MapType.
func (mlc *MapLayerCreate) SetMapType(m *MapType) *MapLayerCreate {
	return mlc.SetMapTypeID(m.ID)
}

// Mutation returns the MapLayerMutation object of the builder.
func (mlc *MapLayerCreate) Mutation() *MapLayerMutation {
	return mlc.mutation
}

// Save creates the MapLayer in the database.
func (mlc *MapLayerCreate) Save(ctx context.Context) (*MapLayer, error) {
	var (
		err  error
		node *MapLayer
	)
	mlc.defaults()
	if len(mlc.hooks) == 0 {
		if err = mlc.check(); err != nil {
			return nil, err
		}
		node, err = mlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MapLayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mlc.check(); err != nil {
				return nil, err
			}
			mlc.mutation = mutation
			node, err = mlc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mlc.hooks) - 1; i >= 0; i-- {
			mut = mlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mlc *MapLayerCreate) SaveX(ctx context.Context) *MapLayer {
	v, err := mlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mlc *MapLayerCreate) defaults() {
	if _, ok := mlc.mutation.CreatedAt(); !ok {
		v := maplayer.DefaultCreatedAt()
		mlc.mutation.SetCreatedAt(v)
	}
	if _, ok := mlc.mutation.UpdatedAt(); !ok {
		v := maplayer.DefaultUpdatedAt()
		mlc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlc *MapLayerCreate) check() error {
	if _, ok := mlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := mlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := mlc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := mlc.mutation.URLTemplate(); !ok {
		return &ValidationError{Name: "url_template", err: errors.New("ent: missing required field \"url_template\"")}
	}
	if _, ok := mlc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New("ent: missing required field \"is_public\"")}
	}
	return nil
}

func (mlc *MapLayerCreate) sqlSave(ctx context.Context) (*MapLayer, error) {
	_node, _spec := mlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mlc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mlc *MapLayerCreate) createSpec() (*MapLayer, *sqlgraph.CreateSpec) {
	var (
		_node = &MapLayer{config: mlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: maplayer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: maplayer.FieldID,
			},
		}
	)
	if value, ok := mlc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: maplayer.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mlc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: maplayer.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mlc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: maplayer.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mlc.mutation.URLTemplate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: maplayer.FieldURLTemplate,
		})
		_node.URLTemplate = value
	}
	if value, ok := mlc.mutation.IsPublic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: maplayer.FieldIsPublic,
		})
		_node.IsPublic = value
	}
	if nodes := mlc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   maplayer.MetadataTable,
			Columns: []string{maplayer.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mlc.mutation.MapTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   maplayer.MapTypeTable,
			Columns: []string{maplayer.MapTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MapLayerCreateBulk is the builder for creating a bulk of MapLayer entities.
type MapLayerCreateBulk struct {
	config
	builders []*MapLayerCreate
}

// Save creates the MapLayer entities in the database.
func (mlcb *MapLayerCreateBulk) Save(ctx context.Context) ([]*MapLayer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mlcb.builders))
	nodes := make([]*MapLayer, len(mlcb.builders))
	mutators := make([]Mutator, len(mlcb.builders))
	for i := range mlcb.builders {
		func(i int, root context.Context) {
			builder := mlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MapLayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mlcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mlcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (mlcb *MapLayerCreateBulk) SaveX(ctx context.Context) []*MapLayer {
	v, err := mlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
