// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/responserms/server/ent/maptype"
	"github.com/responserms/server/ent/metadata"
)

// MapType is the model entity for the MapType schema.
type MapType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// MinZoom holds the value of the "min_zoom" field.
	MinZoom int `json:"min_zoom,omitempty"`
	// MaxZoom holds the value of the "max_zoom" field.
	MaxZoom int `json:"max_zoom,omitempty"`
	// MinX holds the value of the "min_x" field.
	MinX float64 `json:"min_x,omitempty"`
	// MinY holds the value of the "min_y" field.
	MinY float64 `json:"min_y,omitempty"`
	// MaxX holds the value of the "max_x" field.
	MaxX float64 `json:"max_x,omitempty"`
	// MaxY holds the value of the "max_y" field.
	MaxY float64 `json:"max_y,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MapTypeQuery when eager-loading is set.
	Edges MapTypeEdges `json:"edges"`
}

// MapTypeEdges holds the relations/edges for other nodes in the graph.
type MapTypeEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata
	// MapLayers holds the value of the map_layers edge.
	MapLayers []*MapLayer
	// Servers holds the value of the servers edge.
	Servers []*Server
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MapTypeEdges) MetadataOrErr() (*Metadata, error) {
	if e.loadedTypes[0] {
		if e.Metadata == nil {
			// The edge metadata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metadata.Label}
		}
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// MapLayersOrErr returns the MapLayers value or an error if the edge
// was not loaded in eager-loading.
func (e MapTypeEdges) MapLayersOrErr() ([]*MapLayer, error) {
	if e.loadedTypes[1] {
		return e.MapLayers, nil
	}
	return nil, &NotLoadedError{edge: "map_layers"}
}

// ServersOrErr returns the Servers value or an error if the edge
// was not loaded in eager-loading.
func (e MapTypeEdges) ServersOrErr() ([]*Server, error) {
	if e.loadedTypes[2] {
		return e.Servers, nil
	}
	return nil, &NotLoadedError{edge: "servers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MapType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case maptype.FieldMinX, maptype.FieldMinY, maptype.FieldMaxX, maptype.FieldMaxY:
			values[i] = &sql.NullFloat64{}
		case maptype.FieldID, maptype.FieldMinZoom, maptype.FieldMaxZoom:
			values[i] = &sql.NullInt64{}
		case maptype.FieldName:
			values[i] = &sql.NullString{}
		case maptype.FieldCreatedAt, maptype.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type MapType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MapType fields.
func (mt *MapType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case maptype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mt.ID = int(value.Int64)
		case maptype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mt.CreatedAt = value.Time
			}
		case maptype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mt.UpdatedAt = value.Time
			}
		case maptype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mt.Name = value.String
			}
		case maptype.FieldMinZoom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_zoom", values[i])
			} else if value.Valid {
				mt.MinZoom = int(value.Int64)
			}
		case maptype.FieldMaxZoom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_zoom", values[i])
			} else if value.Valid {
				mt.MaxZoom = int(value.Int64)
			}
		case maptype.FieldMinX:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field min_x", values[i])
			} else if value.Valid {
				mt.MinX = value.Float64
			}
		case maptype.FieldMinY:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field min_y", values[i])
			} else if value.Valid {
				mt.MinY = value.Float64
			}
		case maptype.FieldMaxX:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field max_x", values[i])
			} else if value.Valid {
				mt.MaxX = value.Float64
			}
		case maptype.FieldMaxY:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field max_y", values[i])
			} else if value.Valid {
				mt.MaxY = value.Float64
			}
		}
	}
	return nil
}

// QueryMetadata queries the metadata edge of the MapType.
func (mt *MapType) QueryMetadata() *MetadataQuery {
	return (&MapTypeClient{config: mt.config}).QueryMetadata(mt)
}

// QueryMapLayers queries the map_layers edge of the MapType.
func (mt *MapType) QueryMapLayers() *MapLayerQuery {
	return (&MapTypeClient{config: mt.config}).QueryMapLayers(mt)
}

// QueryServers queries the servers edge of the MapType.
func (mt *MapType) QueryServers() *ServerQuery {
	return (&MapTypeClient{config: mt.config}).QueryServers(mt)
}

// Update returns a builder for updating this MapType.
// Note that, you need to call MapType.Unwrap() before calling this method, if this MapType
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *MapType) Update() *MapTypeUpdateOne {
	return (&MapTypeClient{config: mt.config}).UpdateOne(mt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (mt *MapType) Unwrap() *MapType {
	tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: MapType is not a transactional entity")
	}
	mt.config.driver = tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *MapType) String() string {
	var builder strings.Builder
	builder.WriteString("MapType(")
	builder.WriteString(fmt.Sprintf("id=%v", mt.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(mt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(mt.Name)
	builder.WriteString(", min_zoom=")
	builder.WriteString(fmt.Sprintf("%v", mt.MinZoom))
	builder.WriteString(", max_zoom=")
	builder.WriteString(fmt.Sprintf("%v", mt.MaxZoom))
	builder.WriteString(", min_x=")
	builder.WriteString(fmt.Sprintf("%v", mt.MinX))
	builder.WriteString(", min_y=")
	builder.WriteString(fmt.Sprintf("%v", mt.MinY))
	builder.WriteString(", max_x=")
	builder.WriteString(fmt.Sprintf("%v", mt.MaxX))
	builder.WriteString(", max_y=")
	builder.WriteString(fmt.Sprintf("%v", mt.MaxY))
	builder.WriteByte(')')
	return builder.String()
}

// MapTypes is a parsable slice of MapType.
type MapTypes []*MapType

func (mt MapTypes) config(cfg config) {
	for _i := range mt {
		mt[_i].config = cfg
	}
}
