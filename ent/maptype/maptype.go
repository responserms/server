// Code generated by entc, DO NOT EDIT.

package maptype

import (
	"time"
)

const (
	// Label holds the string label denoting the maptype type in the database.
	Label = "map_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMinZoom holds the string denoting the min_zoom field in the database.
	FieldMinZoom = "min_zoom"
	// FieldMaxZoom holds the string denoting the max_zoom field in the database.
	FieldMaxZoom = "max_zoom"
	// FieldMinX holds the string denoting the min_x field in the database.
	FieldMinX = "min_x"
	// FieldMinY holds the string denoting the min_y field in the database.
	FieldMinY = "min_y"
	// FieldMaxX holds the string denoting the max_x field in the database.
	FieldMaxX = "max_x"
	// FieldMaxY holds the string denoting the max_y field in the database.
	FieldMaxY = "max_y"

	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgeMapLayers holds the string denoting the map_layers edge name in mutations.
	EdgeMapLayers = "map_layers"
	// EdgeServers holds the string denoting the servers edge name in mutations.
	EdgeServers = "servers"

	// Table holds the table name of the maptype in the database.
	Table = "map_types"
	// MetadataTable is the table the holds the metadata relation/edge.
	MetadataTable = "metadata"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "map_type_metadata"
	// MapLayersTable is the table the holds the map_layers relation/edge.
	MapLayersTable = "map_layers"
	// MapLayersInverseTable is the table name for the MapLayer entity.
	// It exists in this package in order to avoid circular dependency with the "maplayer" package.
	MapLayersInverseTable = "map_layers"
	// MapLayersColumn is the table column denoting the map_layers relation/edge.
	MapLayersColumn = "map_layer_map_type"
	// ServersTable is the table the holds the servers relation/edge.
	ServersTable = "servers"
	// ServersInverseTable is the table name for the Server entity.
	// It exists in this package in order to avoid circular dependency with the "server" package.
	ServersInverseTable = "servers"
	// ServersColumn is the table column denoting the servers relation/edge.
	ServersColumn = "server_map_type"
)

// Columns holds all SQL columns for maptype fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldMinZoom,
	FieldMaxZoom,
	FieldMinX,
	FieldMinY,
	FieldMaxX,
	FieldMaxY,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
)
