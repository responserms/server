// Code generated by entc, DO NOT EDIT.

package maptype

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/responserms/server/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// MinZoom applies equality check predicate on the "min_zoom" field. It's identical to MinZoomEQ.
func MinZoom(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinZoom), v))
	})
}

// MaxZoom applies equality check predicate on the "max_zoom" field. It's identical to MaxZoomEQ.
func MaxZoom(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxZoom), v))
	})
}

// MinX applies equality check predicate on the "min_x" field. It's identical to MinXEQ.
func MinX(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinX), v))
	})
}

// MinY applies equality check predicate on the "min_y" field. It's identical to MinYEQ.
func MinY(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinY), v))
	})
}

// MaxX applies equality check predicate on the "max_x" field. It's identical to MaxXEQ.
func MaxX(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxX), v))
	})
}

// MaxY applies equality check predicate on the "max_y" field. It's identical to MaxYEQ.
func MaxY(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxY), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// MinZoomEQ applies the EQ predicate on the "min_zoom" field.
func MinZoomEQ(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinZoom), v))
	})
}

// MinZoomNEQ applies the NEQ predicate on the "min_zoom" field.
func MinZoomNEQ(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinZoom), v))
	})
}

// MinZoomIn applies the In predicate on the "min_zoom" field.
func MinZoomIn(vs ...int) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMinZoom), v...))
	})
}

// MinZoomNotIn applies the NotIn predicate on the "min_zoom" field.
func MinZoomNotIn(vs ...int) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMinZoom), v...))
	})
}

// MinZoomGT applies the GT predicate on the "min_zoom" field.
func MinZoomGT(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinZoom), v))
	})
}

// MinZoomGTE applies the GTE predicate on the "min_zoom" field.
func MinZoomGTE(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinZoom), v))
	})
}

// MinZoomLT applies the LT predicate on the "min_zoom" field.
func MinZoomLT(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinZoom), v))
	})
}

// MinZoomLTE applies the LTE predicate on the "min_zoom" field.
func MinZoomLTE(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinZoom), v))
	})
}

// MaxZoomEQ applies the EQ predicate on the "max_zoom" field.
func MaxZoomEQ(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxZoom), v))
	})
}

// MaxZoomNEQ applies the NEQ predicate on the "max_zoom" field.
func MaxZoomNEQ(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxZoom), v))
	})
}

// MaxZoomIn applies the In predicate on the "max_zoom" field.
func MaxZoomIn(vs ...int) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxZoom), v...))
	})
}

// MaxZoomNotIn applies the NotIn predicate on the "max_zoom" field.
func MaxZoomNotIn(vs ...int) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxZoom), v...))
	})
}

// MaxZoomGT applies the GT predicate on the "max_zoom" field.
func MaxZoomGT(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxZoom), v))
	})
}

// MaxZoomGTE applies the GTE predicate on the "max_zoom" field.
func MaxZoomGTE(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxZoom), v))
	})
}

// MaxZoomLT applies the LT predicate on the "max_zoom" field.
func MaxZoomLT(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxZoom), v))
	})
}

// MaxZoomLTE applies the LTE predicate on the "max_zoom" field.
func MaxZoomLTE(v int) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxZoom), v))
	})
}

// MinXEQ applies the EQ predicate on the "min_x" field.
func MinXEQ(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinX), v))
	})
}

// MinXNEQ applies the NEQ predicate on the "min_x" field.
func MinXNEQ(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinX), v))
	})
}

// MinXIn applies the In predicate on the "min_x" field.
func MinXIn(vs ...float64) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMinX), v...))
	})
}

// MinXNotIn applies the NotIn predicate on the "min_x" field.
func MinXNotIn(vs ...float64) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMinX), v...))
	})
}

// MinXGT applies the GT predicate on the "min_x" field.
func MinXGT(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinX), v))
	})
}

// MinXGTE applies the GTE predicate on the "min_x" field.
func MinXGTE(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinX), v))
	})
}

// MinXLT applies the LT predicate on the "min_x" field.
func MinXLT(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinX), v))
	})
}

// MinXLTE applies the LTE predicate on the "min_x" field.
func MinXLTE(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinX), v))
	})
}

// MinYEQ applies the EQ predicate on the "min_y" field.
func MinYEQ(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinY), v))
	})
}

// MinYNEQ applies the NEQ predicate on the "min_y" field.
func MinYNEQ(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinY), v))
	})
}

// MinYIn applies the In predicate on the "min_y" field.
func MinYIn(vs ...float64) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMinY), v...))
	})
}

// MinYNotIn applies the NotIn predicate on the "min_y" field.
func MinYNotIn(vs ...float64) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMinY), v...))
	})
}

// MinYGT applies the GT predicate on the "min_y" field.
func MinYGT(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinY), v))
	})
}

// MinYGTE applies the GTE predicate on the "min_y" field.
func MinYGTE(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinY), v))
	})
}

// MinYLT applies the LT predicate on the "min_y" field.
func MinYLT(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinY), v))
	})
}

// MinYLTE applies the LTE predicate on the "min_y" field.
func MinYLTE(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinY), v))
	})
}

// MaxXEQ applies the EQ predicate on the "max_x" field.
func MaxXEQ(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxX), v))
	})
}

// MaxXNEQ applies the NEQ predicate on the "max_x" field.
func MaxXNEQ(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxX), v))
	})
}

// MaxXIn applies the In predicate on the "max_x" field.
func MaxXIn(vs ...float64) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxX), v...))
	})
}

// MaxXNotIn applies the NotIn predicate on the "max_x" field.
func MaxXNotIn(vs ...float64) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxX), v...))
	})
}

// MaxXGT applies the GT predicate on the "max_x" field.
func MaxXGT(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxX), v))
	})
}

// MaxXGTE applies the GTE predicate on the "max_x" field.
func MaxXGTE(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxX), v))
	})
}

// MaxXLT applies the LT predicate on the "max_x" field.
func MaxXLT(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxX), v))
	})
}

// MaxXLTE applies the LTE predicate on the "max_x" field.
func MaxXLTE(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxX), v))
	})
}

// MaxYEQ applies the EQ predicate on the "max_y" field.
func MaxYEQ(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxY), v))
	})
}

// MaxYNEQ applies the NEQ predicate on the "max_y" field.
func MaxYNEQ(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxY), v))
	})
}

// MaxYIn applies the In predicate on the "max_y" field.
func MaxYIn(vs ...float64) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxY), v...))
	})
}

// MaxYNotIn applies the NotIn predicate on the "max_y" field.
func MaxYNotIn(vs ...float64) predicate.MapType {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MapType(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxY), v...))
	})
}

// MaxYGT applies the GT predicate on the "max_y" field.
func MaxYGT(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxY), v))
	})
}

// MaxYGTE applies the GTE predicate on the "max_y" field.
func MaxYGTE(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxY), v))
	})
}

// MaxYLT applies the LT predicate on the "max_y" field.
func MaxYLT(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxY), v))
	})
}

// MaxYLTE applies the LTE predicate on the "max_y" field.
func MaxYLTE(v float64) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxY), v))
	})
}

// HasMetadata applies the HasEdge predicate on the "metadata" edge.
func HasMetadata() predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataWith applies the HasEdge predicate on the "metadata" edge with a given conditions (other predicates).
func HasMetadataWith(preds ...predicate.Metadata) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMapLayers applies the HasEdge predicate on the "map_layers" edge.
func HasMapLayers() predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MapLayersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MapLayersTable, MapLayersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMapLayersWith applies the HasEdge predicate on the "map_layers" edge with a given conditions (other predicates).
func HasMapLayersWith(preds ...predicate.MapLayer) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MapLayersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MapLayersTable, MapLayersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServers applies the HasEdge predicate on the "servers" edge.
func HasServers() predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ServersTable, ServersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServersWith applies the HasEdge predicate on the "servers" edge with a given conditions (other predicates).
func HasServersWith(preds ...predicate.Server) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ServersTable, ServersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.MapType) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.MapType) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MapType) predicate.MapType {
	return predicate.MapType(func(s *sql.Selector) {
		p(s.Not())
	})
}
