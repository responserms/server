// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/maplayer"
	"github.com/responserms/server/ent/maptype"
	"github.com/responserms/server/ent/metadata"
	"github.com/responserms/server/ent/server"
)

// MapTypeCreate is the builder for creating a MapType entity.
type MapTypeCreate struct {
	config
	mutation *MapTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (mtc *MapTypeCreate) SetCreatedAt(t time.Time) *MapTypeCreate {
	mtc.mutation.SetCreatedAt(t)
	return mtc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mtc *MapTypeCreate) SetNillableCreatedAt(t *time.Time) *MapTypeCreate {
	if t != nil {
		mtc.SetCreatedAt(*t)
	}
	return mtc
}

// SetUpdatedAt sets the updated_at field.
func (mtc *MapTypeCreate) SetUpdatedAt(t time.Time) *MapTypeCreate {
	mtc.mutation.SetUpdatedAt(t)
	return mtc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mtc *MapTypeCreate) SetNillableUpdatedAt(t *time.Time) *MapTypeCreate {
	if t != nil {
		mtc.SetUpdatedAt(*t)
	}
	return mtc
}

// SetName sets the name field.
func (mtc *MapTypeCreate) SetName(s string) *MapTypeCreate {
	mtc.mutation.SetName(s)
	return mtc
}

// SetMinZoom sets the min_zoom field.
func (mtc *MapTypeCreate) SetMinZoom(i int) *MapTypeCreate {
	mtc.mutation.SetMinZoom(i)
	return mtc
}

// SetMaxZoom sets the max_zoom field.
func (mtc *MapTypeCreate) SetMaxZoom(i int) *MapTypeCreate {
	mtc.mutation.SetMaxZoom(i)
	return mtc
}

// SetMinX sets the min_x field.
func (mtc *MapTypeCreate) SetMinX(f float64) *MapTypeCreate {
	mtc.mutation.SetMinX(f)
	return mtc
}

// SetMinY sets the min_y field.
func (mtc *MapTypeCreate) SetMinY(f float64) *MapTypeCreate {
	mtc.mutation.SetMinY(f)
	return mtc
}

// SetMaxX sets the max_x field.
func (mtc *MapTypeCreate) SetMaxX(f float64) *MapTypeCreate {
	mtc.mutation.SetMaxX(f)
	return mtc
}

// SetMaxY sets the max_y field.
func (mtc *MapTypeCreate) SetMaxY(f float64) *MapTypeCreate {
	mtc.mutation.SetMaxY(f)
	return mtc
}

// SetMetadataID sets the metadata edge to Metadata by id.
func (mtc *MapTypeCreate) SetMetadataID(id int) *MapTypeCreate {
	mtc.mutation.SetMetadataID(id)
	return mtc
}

// SetNillableMetadataID sets the metadata edge to Metadata by id if the given value is not nil.
func (mtc *MapTypeCreate) SetNillableMetadataID(id *int) *MapTypeCreate {
	if id != nil {
		mtc = mtc.SetMetadataID(*id)
	}
	return mtc
}

// SetMetadata sets the metadata edge to Metadata.
func (mtc *MapTypeCreate) SetMetadata(m *Metadata) *MapTypeCreate {
	return mtc.SetMetadataID(m.ID)
}

// AddMapLayerIDs adds the map_layers edge to MapLayer by ids.
func (mtc *MapTypeCreate) AddMapLayerIDs(ids ...int) *MapTypeCreate {
	mtc.mutation.AddMapLayerIDs(ids...)
	return mtc
}

// AddMapLayers adds the map_layers edges to MapLayer.
func (mtc *MapTypeCreate) AddMapLayers(m ...*MapLayer) *MapTypeCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtc.AddMapLayerIDs(ids...)
}

// AddServerIDs adds the servers edge to Server by ids.
func (mtc *MapTypeCreate) AddServerIDs(ids ...int) *MapTypeCreate {
	mtc.mutation.AddServerIDs(ids...)
	return mtc
}

// AddServers adds the servers edges to Server.
func (mtc *MapTypeCreate) AddServers(s ...*Server) *MapTypeCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mtc.AddServerIDs(ids...)
}

// Mutation returns the MapTypeMutation object of the builder.
func (mtc *MapTypeCreate) Mutation() *MapTypeMutation {
	return mtc.mutation
}

// Save creates the MapType in the database.
func (mtc *MapTypeCreate) Save(ctx context.Context) (*MapType, error) {
	var (
		err  error
		node *MapType
	)
	mtc.defaults()
	if len(mtc.hooks) == 0 {
		if err = mtc.check(); err != nil {
			return nil, err
		}
		node, err = mtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MapTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mtc.check(); err != nil {
				return nil, err
			}
			mtc.mutation = mutation
			node, err = mtc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtc.hooks) - 1; i >= 0; i-- {
			mut = mtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *MapTypeCreate) SaveX(ctx context.Context) *MapType {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mtc *MapTypeCreate) defaults() {
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		v := maptype.DefaultCreatedAt()
		mtc.mutation.SetCreatedAt(v)
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		v := maptype.DefaultUpdatedAt()
		mtc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mtc *MapTypeCreate) check() error {
	if _, ok := mtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := mtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := mtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := mtc.mutation.MinZoom(); !ok {
		return &ValidationError{Name: "min_zoom", err: errors.New("ent: missing required field \"min_zoom\"")}
	}
	if _, ok := mtc.mutation.MaxZoom(); !ok {
		return &ValidationError{Name: "max_zoom", err: errors.New("ent: missing required field \"max_zoom\"")}
	}
	if _, ok := mtc.mutation.MinX(); !ok {
		return &ValidationError{Name: "min_x", err: errors.New("ent: missing required field \"min_x\"")}
	}
	if _, ok := mtc.mutation.MinY(); !ok {
		return &ValidationError{Name: "min_y", err: errors.New("ent: missing required field \"min_y\"")}
	}
	if _, ok := mtc.mutation.MaxX(); !ok {
		return &ValidationError{Name: "max_x", err: errors.New("ent: missing required field \"max_x\"")}
	}
	if _, ok := mtc.mutation.MaxY(); !ok {
		return &ValidationError{Name: "max_y", err: errors.New("ent: missing required field \"max_y\"")}
	}
	return nil
}

func (mtc *MapTypeCreate) sqlSave(ctx context.Context) (*MapType, error) {
	_node, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mtc *MapTypeCreate) createSpec() (*MapType, *sqlgraph.CreateSpec) {
	var (
		_node = &MapType{config: mtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: maptype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: maptype.FieldID,
			},
		}
	)
	if value, ok := mtc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: maptype.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mtc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: maptype.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mtc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: maptype.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mtc.mutation.MinZoom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: maptype.FieldMinZoom,
		})
		_node.MinZoom = value
	}
	if value, ok := mtc.mutation.MaxZoom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: maptype.FieldMaxZoom,
		})
		_node.MaxZoom = value
	}
	if value, ok := mtc.mutation.MinX(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMinX,
		})
		_node.MinX = value
	}
	if value, ok := mtc.mutation.MinY(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMinY,
		})
		_node.MinY = value
	}
	if value, ok := mtc.mutation.MaxX(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMaxX,
		})
		_node.MaxX = value
	}
	if value, ok := mtc.mutation.MaxY(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMaxY,
		})
		_node.MaxY = value
	}
	if nodes := mtc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   maptype.MetadataTable,
			Columns: []string{maptype.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mtc.mutation.MapLayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.MapLayersTable,
			Columns: []string{maptype.MapLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mtc.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.ServersTable,
			Columns: []string{maptype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MapTypeCreateBulk is the builder for creating a bulk of MapType entities.
type MapTypeCreateBulk struct {
	config
	builders []*MapTypeCreate
}

// Save creates the MapType entities in the database.
func (mtcb *MapTypeCreateBulk) Save(ctx context.Context) ([]*MapType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mtcb.builders))
	nodes := make([]*MapType, len(mtcb.builders))
	mutators := make([]Mutator, len(mtcb.builders))
	for i := range mtcb.builders {
		func(i int, root context.Context) {
			builder := mtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MapTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mtcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mtcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (mtcb *MapTypeCreateBulk) SaveX(ctx context.Context) []*MapType {
	v, err := mtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
