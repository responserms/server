// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/maplayer"
	"github.com/responserms/server/ent/maptype"
	"github.com/responserms/server/ent/metadata"
	"github.com/responserms/server/ent/predicate"
	"github.com/responserms/server/ent/server"
)

// MapTypeQuery is the builder for querying MapType entities.
type MapTypeQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.MapType
	// eager-loading edges.
	withMetadata  *MetadataQuery
	withMapLayers *MapLayerQuery
	withServers   *ServerQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (mtq *MapTypeQuery) Where(ps ...predicate.MapType) *MapTypeQuery {
	mtq.predicates = append(mtq.predicates, ps...)
	return mtq
}

// Limit adds a limit step to the query.
func (mtq *MapTypeQuery) Limit(limit int) *MapTypeQuery {
	mtq.limit = &limit
	return mtq
}

// Offset adds an offset step to the query.
func (mtq *MapTypeQuery) Offset(offset int) *MapTypeQuery {
	mtq.offset = &offset
	return mtq
}

// Order adds an order step to the query.
func (mtq *MapTypeQuery) Order(o ...OrderFunc) *MapTypeQuery {
	mtq.order = append(mtq.order, o...)
	return mtq
}

// QueryMetadata chains the current query on the metadata edge.
func (mtq *MapTypeQuery) QueryMetadata() *MetadataQuery {
	query := &MetadataQuery{config: mtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mtq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(maptype.Table, maptype.FieldID, selector),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, maptype.MetadataTable, maptype.MetadataColumn),
		)
		fromU = sqlgraph.SetNeighbors(mtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMapLayers chains the current query on the map_layers edge.
func (mtq *MapTypeQuery) QueryMapLayers() *MapLayerQuery {
	query := &MapLayerQuery{config: mtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mtq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(maptype.Table, maptype.FieldID, selector),
			sqlgraph.To(maplayer.Table, maplayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, maptype.MapLayersTable, maptype.MapLayersColumn),
		)
		fromU = sqlgraph.SetNeighbors(mtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServers chains the current query on the servers edge.
func (mtq *MapTypeQuery) QueryServers() *ServerQuery {
	query := &ServerQuery{config: mtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mtq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(maptype.Table, maptype.FieldID, selector),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, maptype.ServersTable, maptype.ServersColumn),
		)
		fromU = sqlgraph.SetNeighbors(mtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MapType entity in the query. Returns *NotFoundError when no maptype was found.
func (mtq *MapTypeQuery) First(ctx context.Context) (*MapType, error) {
	nodes, err := mtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{maptype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mtq *MapTypeQuery) FirstX(ctx context.Context) *MapType {
	node, err := mtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MapType id in the query. Returns *NotFoundError when no id was found.
func (mtq *MapTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{maptype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mtq *MapTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := mtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only MapType entity in the query, returns an error if not exactly one entity was returned.
func (mtq *MapTypeQuery) Only(ctx context.Context) (*MapType, error) {
	nodes, err := mtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{maptype.Label}
	default:
		return nil, &NotSingularError{maptype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mtq *MapTypeQuery) OnlyX(ctx context.Context) *MapType {
	node, err := mtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only MapType id in the query, returns an error if not exactly one id was returned.
func (mtq *MapTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{maptype.Label}
	default:
		err = &NotSingularError{maptype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mtq *MapTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := mtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MapTypes.
func (mtq *MapTypeQuery) All(ctx context.Context) ([]*MapType, error) {
	if err := mtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mtq *MapTypeQuery) AllX(ctx context.Context) []*MapType {
	nodes, err := mtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MapType ids.
func (mtq *MapTypeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := mtq.Select(maptype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mtq *MapTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := mtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mtq *MapTypeQuery) Count(ctx context.Context) (int, error) {
	if err := mtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mtq *MapTypeQuery) CountX(ctx context.Context) int {
	count, err := mtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mtq *MapTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := mtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mtq *MapTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := mtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mtq *MapTypeQuery) Clone() *MapTypeQuery {
	if mtq == nil {
		return nil
	}
	return &MapTypeQuery{
		config:        mtq.config,
		limit:         mtq.limit,
		offset:        mtq.offset,
		order:         append([]OrderFunc{}, mtq.order...),
		predicates:    append([]predicate.MapType{}, mtq.predicates...),
		withMetadata:  mtq.withMetadata.Clone(),
		withMapLayers: mtq.withMapLayers.Clone(),
		withServers:   mtq.withServers.Clone(),
		// clone intermediate query.
		sql:  mtq.sql.Clone(),
		path: mtq.path,
	}
}

//  WithMetadata tells the query-builder to eager-loads the nodes that are connected to
// the "metadata" edge. The optional arguments used to configure the query builder of the edge.
func (mtq *MapTypeQuery) WithMetadata(opts ...func(*MetadataQuery)) *MapTypeQuery {
	query := &MetadataQuery{config: mtq.config}
	for _, opt := range opts {
		opt(query)
	}
	mtq.withMetadata = query
	return mtq
}

//  WithMapLayers tells the query-builder to eager-loads the nodes that are connected to
// the "map_layers" edge. The optional arguments used to configure the query builder of the edge.
func (mtq *MapTypeQuery) WithMapLayers(opts ...func(*MapLayerQuery)) *MapTypeQuery {
	query := &MapLayerQuery{config: mtq.config}
	for _, opt := range opts {
		opt(query)
	}
	mtq.withMapLayers = query
	return mtq
}

//  WithServers tells the query-builder to eager-loads the nodes that are connected to
// the "servers" edge. The optional arguments used to configure the query builder of the edge.
func (mtq *MapTypeQuery) WithServers(opts ...func(*ServerQuery)) *MapTypeQuery {
	query := &ServerQuery{config: mtq.config}
	for _, opt := range opts {
		opt(query)
	}
	mtq.withServers = query
	return mtq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MapType.Query().
//		GroupBy(maptype.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mtq *MapTypeQuery) GroupBy(field string, fields ...string) *MapTypeGroupBy {
	group := &MapTypeGroupBy{config: mtq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mtq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.MapType.Query().
//		Select(maptype.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (mtq *MapTypeQuery) Select(field string, fields ...string) *MapTypeSelect {
	mtq.fields = append([]string{field}, fields...)
	return &MapTypeSelect{MapTypeQuery: mtq}
}

func (mtq *MapTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mtq.fields {
		if !maptype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mtq.path != nil {
		prev, err := mtq.path(ctx)
		if err != nil {
			return err
		}
		mtq.sql = prev
	}
	return nil
}

func (mtq *MapTypeQuery) sqlAll(ctx context.Context) ([]*MapType, error) {
	var (
		nodes       = []*MapType{}
		_spec       = mtq.querySpec()
		loadedTypes = [3]bool{
			mtq.withMetadata != nil,
			mtq.withMapLayers != nil,
			mtq.withServers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &MapType{config: mtq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, mtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := mtq.withMetadata; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*MapType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Metadata(func(s *sql.Selector) {
			s.Where(sql.InValues(maptype.MetadataColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.map_type_metadata
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "map_type_metadata" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "map_type_metadata" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Metadata = n
		}
	}

	if query := mtq.withMapLayers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*MapType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.MapLayers = []*MapLayer{}
		}
		query.withFKs = true
		query.Where(predicate.MapLayer(func(s *sql.Selector) {
			s.Where(sql.InValues(maptype.MapLayersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.map_layer_map_type
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "map_layer_map_type" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "map_layer_map_type" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.MapLayers = append(node.Edges.MapLayers, n)
		}
	}

	if query := mtq.withServers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*MapType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Servers = []*Server{}
		}
		query.withFKs = true
		query.Where(predicate.Server(func(s *sql.Selector) {
			s.Where(sql.InValues(maptype.ServersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.server_map_type
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "server_map_type" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "server_map_type" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Servers = append(node.Edges.Servers, n)
		}
	}

	return nodes, nil
}

func (mtq *MapTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mtq.querySpec()
	return sqlgraph.CountNodes(ctx, mtq.driver, _spec)
}

func (mtq *MapTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (mtq *MapTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   maptype.Table,
			Columns: maptype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: maptype.FieldID,
			},
		},
		From:   mtq.sql,
		Unique: true,
	}
	if fields := mtq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, maptype.FieldID)
		for i := range fields {
			if fields[i] != maptype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, maptype.ValidColumn)
			}
		}
	}
	return _spec
}

func (mtq *MapTypeQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(mtq.driver.Dialect())
	t1 := builder.Table(maptype.Table)
	selector := builder.Select(t1.Columns(maptype.Columns...)...).From(t1)
	if mtq.sql != nil {
		selector = mtq.sql
		selector.Select(selector.Columns(maptype.Columns...)...)
	}
	for _, p := range mtq.predicates {
		p(selector)
	}
	for _, p := range mtq.order {
		p(selector, maptype.ValidColumn)
	}
	if offset := mtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MapTypeGroupBy is the builder for group-by MapType entities.
type MapTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mtgb *MapTypeGroupBy) Aggregate(fns ...AggregateFunc) *MapTypeGroupBy {
	mtgb.fns = append(mtgb.fns, fns...)
	return mtgb
}

// Scan applies the group-by query and scan the result into the given value.
func (mtgb *MapTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := mtgb.path(ctx)
	if err != nil {
		return err
	}
	mtgb.sql = query
	return mtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mtgb *MapTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (mtgb *MapTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mtgb.fields) > 1 {
		return nil, errors.New("ent: MapTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mtgb *MapTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := mtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (mtgb *MapTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mtgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{maptype.Label}
	default:
		err = fmt.Errorf("ent: MapTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mtgb *MapTypeGroupBy) StringX(ctx context.Context) string {
	v, err := mtgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (mtgb *MapTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mtgb.fields) > 1 {
		return nil, errors.New("ent: MapTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mtgb *MapTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := mtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (mtgb *MapTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mtgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{maptype.Label}
	default:
		err = fmt.Errorf("ent: MapTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mtgb *MapTypeGroupBy) IntX(ctx context.Context) int {
	v, err := mtgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (mtgb *MapTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mtgb.fields) > 1 {
		return nil, errors.New("ent: MapTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mtgb *MapTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (mtgb *MapTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mtgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{maptype.Label}
	default:
		err = fmt.Errorf("ent: MapTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mtgb *MapTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := mtgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (mtgb *MapTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mtgb.fields) > 1 {
		return nil, errors.New("ent: MapTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mtgb *MapTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (mtgb *MapTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mtgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{maptype.Label}
	default:
		err = fmt.Errorf("ent: MapTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mtgb *MapTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := mtgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mtgb *MapTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range mtgb.fields {
		if !maptype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mtgb *MapTypeGroupBy) sqlQuery() *sql.Selector {
	selector := mtgb.sql
	columns := make([]string, 0, len(mtgb.fields)+len(mtgb.fns))
	columns = append(columns, mtgb.fields...)
	for _, fn := range mtgb.fns {
		columns = append(columns, fn(selector, maptype.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(mtgb.fields...)
}

// MapTypeSelect is the builder for select fields of MapType entities.
type MapTypeSelect struct {
	*MapTypeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (mts *MapTypeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := mts.prepareQuery(ctx); err != nil {
		return err
	}
	mts.sql = mts.MapTypeQuery.sqlQuery()
	return mts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mts *MapTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (mts *MapTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mts.fields) > 1 {
		return nil, errors.New("ent: MapTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mts *MapTypeSelect) StringsX(ctx context.Context) []string {
	v, err := mts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (mts *MapTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{maptype.Label}
	default:
		err = fmt.Errorf("ent: MapTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mts *MapTypeSelect) StringX(ctx context.Context) string {
	v, err := mts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (mts *MapTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mts.fields) > 1 {
		return nil, errors.New("ent: MapTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mts *MapTypeSelect) IntsX(ctx context.Context) []int {
	v, err := mts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (mts *MapTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{maptype.Label}
	default:
		err = fmt.Errorf("ent: MapTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mts *MapTypeSelect) IntX(ctx context.Context) int {
	v, err := mts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (mts *MapTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mts.fields) > 1 {
		return nil, errors.New("ent: MapTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mts *MapTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (mts *MapTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{maptype.Label}
	default:
		err = fmt.Errorf("ent: MapTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mts *MapTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := mts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (mts *MapTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mts.fields) > 1 {
		return nil, errors.New("ent: MapTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mts *MapTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := mts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (mts *MapTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{maptype.Label}
	default:
		err = fmt.Errorf("ent: MapTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mts *MapTypeSelect) BoolX(ctx context.Context) bool {
	v, err := mts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mts *MapTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mts.sqlQuery().Query()
	if err := mts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mts *MapTypeSelect) sqlQuery() sql.Querier {
	selector := mts.sql
	selector.Select(selector.Columns(mts.fields...)...)
	return selector
}
