// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/maplayer"
	"github.com/responserms/server/ent/maptype"
	"github.com/responserms/server/ent/metadata"
	"github.com/responserms/server/ent/predicate"
	"github.com/responserms/server/ent/server"
)

// MapTypeUpdate is the builder for updating MapType entities.
type MapTypeUpdate struct {
	config
	hooks    []Hook
	mutation *MapTypeMutation
}

// Where adds a new predicate for the builder.
func (mtu *MapTypeUpdate) Where(ps ...predicate.MapType) *MapTypeUpdate {
	mtu.mutation.predicates = append(mtu.mutation.predicates, ps...)
	return mtu
}

// SetUpdatedAt sets the updated_at field.
func (mtu *MapTypeUpdate) SetUpdatedAt(t time.Time) *MapTypeUpdate {
	mtu.mutation.SetUpdatedAt(t)
	return mtu
}

// SetName sets the name field.
func (mtu *MapTypeUpdate) SetName(s string) *MapTypeUpdate {
	mtu.mutation.SetName(s)
	return mtu
}

// SetMinZoom sets the min_zoom field.
func (mtu *MapTypeUpdate) SetMinZoom(i int) *MapTypeUpdate {
	mtu.mutation.ResetMinZoom()
	mtu.mutation.SetMinZoom(i)
	return mtu
}

// AddMinZoom adds i to min_zoom.
func (mtu *MapTypeUpdate) AddMinZoom(i int) *MapTypeUpdate {
	mtu.mutation.AddMinZoom(i)
	return mtu
}

// SetMaxZoom sets the max_zoom field.
func (mtu *MapTypeUpdate) SetMaxZoom(i int) *MapTypeUpdate {
	mtu.mutation.ResetMaxZoom()
	mtu.mutation.SetMaxZoom(i)
	return mtu
}

// AddMaxZoom adds i to max_zoom.
func (mtu *MapTypeUpdate) AddMaxZoom(i int) *MapTypeUpdate {
	mtu.mutation.AddMaxZoom(i)
	return mtu
}

// SetMinX sets the min_x field.
func (mtu *MapTypeUpdate) SetMinX(f float64) *MapTypeUpdate {
	mtu.mutation.ResetMinX()
	mtu.mutation.SetMinX(f)
	return mtu
}

// AddMinX adds f to min_x.
func (mtu *MapTypeUpdate) AddMinX(f float64) *MapTypeUpdate {
	mtu.mutation.AddMinX(f)
	return mtu
}

// SetMinY sets the min_y field.
func (mtu *MapTypeUpdate) SetMinY(f float64) *MapTypeUpdate {
	mtu.mutation.ResetMinY()
	mtu.mutation.SetMinY(f)
	return mtu
}

// AddMinY adds f to min_y.
func (mtu *MapTypeUpdate) AddMinY(f float64) *MapTypeUpdate {
	mtu.mutation.AddMinY(f)
	return mtu
}

// SetMaxX sets the max_x field.
func (mtu *MapTypeUpdate) SetMaxX(f float64) *MapTypeUpdate {
	mtu.mutation.ResetMaxX()
	mtu.mutation.SetMaxX(f)
	return mtu
}

// AddMaxX adds f to max_x.
func (mtu *MapTypeUpdate) AddMaxX(f float64) *MapTypeUpdate {
	mtu.mutation.AddMaxX(f)
	return mtu
}

// SetMaxY sets the max_y field.
func (mtu *MapTypeUpdate) SetMaxY(f float64) *MapTypeUpdate {
	mtu.mutation.ResetMaxY()
	mtu.mutation.SetMaxY(f)
	return mtu
}

// AddMaxY adds f to max_y.
func (mtu *MapTypeUpdate) AddMaxY(f float64) *MapTypeUpdate {
	mtu.mutation.AddMaxY(f)
	return mtu
}

// SetMetadataID sets the metadata edge to Metadata by id.
func (mtu *MapTypeUpdate) SetMetadataID(id int) *MapTypeUpdate {
	mtu.mutation.SetMetadataID(id)
	return mtu
}

// SetNillableMetadataID sets the metadata edge to Metadata by id if the given value is not nil.
func (mtu *MapTypeUpdate) SetNillableMetadataID(id *int) *MapTypeUpdate {
	if id != nil {
		mtu = mtu.SetMetadataID(*id)
	}
	return mtu
}

// SetMetadata sets the metadata edge to Metadata.
func (mtu *MapTypeUpdate) SetMetadata(m *Metadata) *MapTypeUpdate {
	return mtu.SetMetadataID(m.ID)
}

// AddMapLayerIDs adds the map_layers edge to MapLayer by ids.
func (mtu *MapTypeUpdate) AddMapLayerIDs(ids ...int) *MapTypeUpdate {
	mtu.mutation.AddMapLayerIDs(ids...)
	return mtu
}

// AddMapLayers adds the map_layers edges to MapLayer.
func (mtu *MapTypeUpdate) AddMapLayers(m ...*MapLayer) *MapTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.AddMapLayerIDs(ids...)
}

// AddServerIDs adds the servers edge to Server by ids.
func (mtu *MapTypeUpdate) AddServerIDs(ids ...int) *MapTypeUpdate {
	mtu.mutation.AddServerIDs(ids...)
	return mtu
}

// AddServers adds the servers edges to Server.
func (mtu *MapTypeUpdate) AddServers(s ...*Server) *MapTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mtu.AddServerIDs(ids...)
}

// Mutation returns the MapTypeMutation object of the builder.
func (mtu *MapTypeUpdate) Mutation() *MapTypeMutation {
	return mtu.mutation
}

// ClearMetadata clears the "metadata" edge to type Metadata.
func (mtu *MapTypeUpdate) ClearMetadata() *MapTypeUpdate {
	mtu.mutation.ClearMetadata()
	return mtu
}

// ClearMapLayers clears all "map_layers" edges to type MapLayer.
func (mtu *MapTypeUpdate) ClearMapLayers() *MapTypeUpdate {
	mtu.mutation.ClearMapLayers()
	return mtu
}

// RemoveMapLayerIDs removes the map_layers edge to MapLayer by ids.
func (mtu *MapTypeUpdate) RemoveMapLayerIDs(ids ...int) *MapTypeUpdate {
	mtu.mutation.RemoveMapLayerIDs(ids...)
	return mtu
}

// RemoveMapLayers removes map_layers edges to MapLayer.
func (mtu *MapTypeUpdate) RemoveMapLayers(m ...*MapLayer) *MapTypeUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtu.RemoveMapLayerIDs(ids...)
}

// ClearServers clears all "servers" edges to type Server.
func (mtu *MapTypeUpdate) ClearServers() *MapTypeUpdate {
	mtu.mutation.ClearServers()
	return mtu
}

// RemoveServerIDs removes the servers edge to Server by ids.
func (mtu *MapTypeUpdate) RemoveServerIDs(ids ...int) *MapTypeUpdate {
	mtu.mutation.RemoveServerIDs(ids...)
	return mtu
}

// RemoveServers removes servers edges to Server.
func (mtu *MapTypeUpdate) RemoveServers(s ...*Server) *MapTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mtu.RemoveServerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtu *MapTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	mtu.defaults()
	if len(mtu.hooks) == 0 {
		affected, err = mtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MapTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtu.mutation = mutation
			affected, err = mtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mtu.hooks) - 1; i >= 0; i-- {
			mut = mtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MapTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MapTypeUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MapTypeUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtu *MapTypeUpdate) defaults() {
	if _, ok := mtu.mutation.UpdatedAt(); !ok {
		v := maptype.UpdateDefaultUpdatedAt()
		mtu.mutation.SetUpdatedAt(v)
	}
}

func (mtu *MapTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   maptype.Table,
			Columns: maptype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: maptype.FieldID,
			},
		},
	}
	if ps := mtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: maptype.FieldUpdatedAt,
		})
	}
	if value, ok := mtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: maptype.FieldName,
		})
	}
	if value, ok := mtu.mutation.MinZoom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: maptype.FieldMinZoom,
		})
	}
	if value, ok := mtu.mutation.AddedMinZoom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: maptype.FieldMinZoom,
		})
	}
	if value, ok := mtu.mutation.MaxZoom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: maptype.FieldMaxZoom,
		})
	}
	if value, ok := mtu.mutation.AddedMaxZoom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: maptype.FieldMaxZoom,
		})
	}
	if value, ok := mtu.mutation.MinX(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMinX,
		})
	}
	if value, ok := mtu.mutation.AddedMinX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMinX,
		})
	}
	if value, ok := mtu.mutation.MinY(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMinY,
		})
	}
	if value, ok := mtu.mutation.AddedMinY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMinY,
		})
	}
	if value, ok := mtu.mutation.MaxX(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMaxX,
		})
	}
	if value, ok := mtu.mutation.AddedMaxX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMaxX,
		})
	}
	if value, ok := mtu.mutation.MaxY(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMaxY,
		})
	}
	if value, ok := mtu.mutation.AddedMaxY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMaxY,
		})
	}
	if mtu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   maptype.MetadataTable,
			Columns: []string{maptype.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   maptype.MetadataTable,
			Columns: []string{maptype.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mtu.mutation.MapLayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.MapLayersTable,
			Columns: []string{maptype.MapLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maplayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.RemovedMapLayersIDs(); len(nodes) > 0 && !mtu.mutation.MapLayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.MapLayersTable,
			Columns: []string{maptype.MapLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.MapLayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.MapLayersTable,
			Columns: []string{maptype.MapLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mtu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.ServersTable,
			Columns: []string{maptype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.RemovedServersIDs(); len(nodes) > 0 && !mtu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.ServersTable,
			Columns: []string{maptype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.ServersTable,
			Columns: []string{maptype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{maptype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MapTypeUpdateOne is the builder for updating a single MapType entity.
type MapTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *MapTypeMutation
}

// SetUpdatedAt sets the updated_at field.
func (mtuo *MapTypeUpdateOne) SetUpdatedAt(t time.Time) *MapTypeUpdateOne {
	mtuo.mutation.SetUpdatedAt(t)
	return mtuo
}

// SetName sets the name field.
func (mtuo *MapTypeUpdateOne) SetName(s string) *MapTypeUpdateOne {
	mtuo.mutation.SetName(s)
	return mtuo
}

// SetMinZoom sets the min_zoom field.
func (mtuo *MapTypeUpdateOne) SetMinZoom(i int) *MapTypeUpdateOne {
	mtuo.mutation.ResetMinZoom()
	mtuo.mutation.SetMinZoom(i)
	return mtuo
}

// AddMinZoom adds i to min_zoom.
func (mtuo *MapTypeUpdateOne) AddMinZoom(i int) *MapTypeUpdateOne {
	mtuo.mutation.AddMinZoom(i)
	return mtuo
}

// SetMaxZoom sets the max_zoom field.
func (mtuo *MapTypeUpdateOne) SetMaxZoom(i int) *MapTypeUpdateOne {
	mtuo.mutation.ResetMaxZoom()
	mtuo.mutation.SetMaxZoom(i)
	return mtuo
}

// AddMaxZoom adds i to max_zoom.
func (mtuo *MapTypeUpdateOne) AddMaxZoom(i int) *MapTypeUpdateOne {
	mtuo.mutation.AddMaxZoom(i)
	return mtuo
}

// SetMinX sets the min_x field.
func (mtuo *MapTypeUpdateOne) SetMinX(f float64) *MapTypeUpdateOne {
	mtuo.mutation.ResetMinX()
	mtuo.mutation.SetMinX(f)
	return mtuo
}

// AddMinX adds f to min_x.
func (mtuo *MapTypeUpdateOne) AddMinX(f float64) *MapTypeUpdateOne {
	mtuo.mutation.AddMinX(f)
	return mtuo
}

// SetMinY sets the min_y field.
func (mtuo *MapTypeUpdateOne) SetMinY(f float64) *MapTypeUpdateOne {
	mtuo.mutation.ResetMinY()
	mtuo.mutation.SetMinY(f)
	return mtuo
}

// AddMinY adds f to min_y.
func (mtuo *MapTypeUpdateOne) AddMinY(f float64) *MapTypeUpdateOne {
	mtuo.mutation.AddMinY(f)
	return mtuo
}

// SetMaxX sets the max_x field.
func (mtuo *MapTypeUpdateOne) SetMaxX(f float64) *MapTypeUpdateOne {
	mtuo.mutation.ResetMaxX()
	mtuo.mutation.SetMaxX(f)
	return mtuo
}

// AddMaxX adds f to max_x.
func (mtuo *MapTypeUpdateOne) AddMaxX(f float64) *MapTypeUpdateOne {
	mtuo.mutation.AddMaxX(f)
	return mtuo
}

// SetMaxY sets the max_y field.
func (mtuo *MapTypeUpdateOne) SetMaxY(f float64) *MapTypeUpdateOne {
	mtuo.mutation.ResetMaxY()
	mtuo.mutation.SetMaxY(f)
	return mtuo
}

// AddMaxY adds f to max_y.
func (mtuo *MapTypeUpdateOne) AddMaxY(f float64) *MapTypeUpdateOne {
	mtuo.mutation.AddMaxY(f)
	return mtuo
}

// SetMetadataID sets the metadata edge to Metadata by id.
func (mtuo *MapTypeUpdateOne) SetMetadataID(id int) *MapTypeUpdateOne {
	mtuo.mutation.SetMetadataID(id)
	return mtuo
}

// SetNillableMetadataID sets the metadata edge to Metadata by id if the given value is not nil.
func (mtuo *MapTypeUpdateOne) SetNillableMetadataID(id *int) *MapTypeUpdateOne {
	if id != nil {
		mtuo = mtuo.SetMetadataID(*id)
	}
	return mtuo
}

// SetMetadata sets the metadata edge to Metadata.
func (mtuo *MapTypeUpdateOne) SetMetadata(m *Metadata) *MapTypeUpdateOne {
	return mtuo.SetMetadataID(m.ID)
}

// AddMapLayerIDs adds the map_layers edge to MapLayer by ids.
func (mtuo *MapTypeUpdateOne) AddMapLayerIDs(ids ...int) *MapTypeUpdateOne {
	mtuo.mutation.AddMapLayerIDs(ids...)
	return mtuo
}

// AddMapLayers adds the map_layers edges to MapLayer.
func (mtuo *MapTypeUpdateOne) AddMapLayers(m ...*MapLayer) *MapTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.AddMapLayerIDs(ids...)
}

// AddServerIDs adds the servers edge to Server by ids.
func (mtuo *MapTypeUpdateOne) AddServerIDs(ids ...int) *MapTypeUpdateOne {
	mtuo.mutation.AddServerIDs(ids...)
	return mtuo
}

// AddServers adds the servers edges to Server.
func (mtuo *MapTypeUpdateOne) AddServers(s ...*Server) *MapTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mtuo.AddServerIDs(ids...)
}

// Mutation returns the MapTypeMutation object of the builder.
func (mtuo *MapTypeUpdateOne) Mutation() *MapTypeMutation {
	return mtuo.mutation
}

// ClearMetadata clears the "metadata" edge to type Metadata.
func (mtuo *MapTypeUpdateOne) ClearMetadata() *MapTypeUpdateOne {
	mtuo.mutation.ClearMetadata()
	return mtuo
}

// ClearMapLayers clears all "map_layers" edges to type MapLayer.
func (mtuo *MapTypeUpdateOne) ClearMapLayers() *MapTypeUpdateOne {
	mtuo.mutation.ClearMapLayers()
	return mtuo
}

// RemoveMapLayerIDs removes the map_layers edge to MapLayer by ids.
func (mtuo *MapTypeUpdateOne) RemoveMapLayerIDs(ids ...int) *MapTypeUpdateOne {
	mtuo.mutation.RemoveMapLayerIDs(ids...)
	return mtuo
}

// RemoveMapLayers removes map_layers edges to MapLayer.
func (mtuo *MapTypeUpdateOne) RemoveMapLayers(m ...*MapLayer) *MapTypeUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtuo.RemoveMapLayerIDs(ids...)
}

// ClearServers clears all "servers" edges to type Server.
func (mtuo *MapTypeUpdateOne) ClearServers() *MapTypeUpdateOne {
	mtuo.mutation.ClearServers()
	return mtuo
}

// RemoveServerIDs removes the servers edge to Server by ids.
func (mtuo *MapTypeUpdateOne) RemoveServerIDs(ids ...int) *MapTypeUpdateOne {
	mtuo.mutation.RemoveServerIDs(ids...)
	return mtuo
}

// RemoveServers removes servers edges to Server.
func (mtuo *MapTypeUpdateOne) RemoveServers(s ...*Server) *MapTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mtuo.RemoveServerIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (mtuo *MapTypeUpdateOne) Save(ctx context.Context) (*MapType, error) {
	var (
		err  error
		node *MapType
	)
	mtuo.defaults()
	if len(mtuo.hooks) == 0 {
		node, err = mtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MapTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtuo.mutation = mutation
			node, err = mtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtuo.hooks) - 1; i >= 0; i-- {
			mut = mtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MapTypeUpdateOne) SaveX(ctx context.Context) *MapType {
	node, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtuo *MapTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MapTypeUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mtuo *MapTypeUpdateOne) defaults() {
	if _, ok := mtuo.mutation.UpdatedAt(); !ok {
		v := maptype.UpdateDefaultUpdatedAt()
		mtuo.mutation.SetUpdatedAt(v)
	}
}

func (mtuo *MapTypeUpdateOne) sqlSave(ctx context.Context) (_node *MapType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   maptype.Table,
			Columns: maptype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: maptype.FieldID,
			},
		},
	}
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MapType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := mtuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: maptype.FieldUpdatedAt,
		})
	}
	if value, ok := mtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: maptype.FieldName,
		})
	}
	if value, ok := mtuo.mutation.MinZoom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: maptype.FieldMinZoom,
		})
	}
	if value, ok := mtuo.mutation.AddedMinZoom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: maptype.FieldMinZoom,
		})
	}
	if value, ok := mtuo.mutation.MaxZoom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: maptype.FieldMaxZoom,
		})
	}
	if value, ok := mtuo.mutation.AddedMaxZoom(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: maptype.FieldMaxZoom,
		})
	}
	if value, ok := mtuo.mutation.MinX(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMinX,
		})
	}
	if value, ok := mtuo.mutation.AddedMinX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMinX,
		})
	}
	if value, ok := mtuo.mutation.MinY(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMinY,
		})
	}
	if value, ok := mtuo.mutation.AddedMinY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMinY,
		})
	}
	if value, ok := mtuo.mutation.MaxX(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMaxX,
		})
	}
	if value, ok := mtuo.mutation.AddedMaxX(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMaxX,
		})
	}
	if value, ok := mtuo.mutation.MaxY(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMaxY,
		})
	}
	if value, ok := mtuo.mutation.AddedMaxY(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: maptype.FieldMaxY,
		})
	}
	if mtuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   maptype.MetadataTable,
			Columns: []string{maptype.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   maptype.MetadataTable,
			Columns: []string{maptype.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mtuo.mutation.MapLayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.MapLayersTable,
			Columns: []string{maptype.MapLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maplayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.RemovedMapLayersIDs(); len(nodes) > 0 && !mtuo.mutation.MapLayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.MapLayersTable,
			Columns: []string{maptype.MapLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.MapLayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.MapLayersTable,
			Columns: []string{maptype.MapLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maplayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mtuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.ServersTable,
			Columns: []string{maptype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.RemovedServersIDs(); len(nodes) > 0 && !mtuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.ServersTable,
			Columns: []string{maptype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   maptype.ServersTable,
			Columns: []string{maptype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MapType{config: mtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{maptype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
