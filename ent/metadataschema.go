// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/qri-io/jsonschema"
	"github.com/responserms/server/ent/metadataschema"
)

// MetadataSchema is the model entity for the MetadataSchema schema.
type MetadataSchema struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// About holds the value of the "about" field.
	About *string `json:"about,omitempty"`
	// Schema holds the value of the "schema" field.
	Schema *jsonschema.Schema `json:"schema,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetadataSchemaQuery when eager-loading is set.
	Edges MetadataSchemaEdges `json:"edges"`
}

// MetadataSchemaEdges holds the relations/edges for other nodes in the graph.
type MetadataSchemaEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata []*Metadata
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading.
func (e MetadataSchemaEdges) MetadataOrErr() ([]*Metadata, error) {
	if e.loadedTypes[0] {
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MetadataSchema) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case metadataschema.FieldSchema:
			values[i] = &[]byte{}
		case metadataschema.FieldID:
			values[i] = &sql.NullInt64{}
		case metadataschema.FieldName, metadataschema.FieldAbout:
			values[i] = &sql.NullString{}
		case metadataschema.FieldCreatedAt, metadataschema.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type MetadataSchema", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MetadataSchema fields.
func (ms *MetadataSchema) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metadataschema.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case metadataschema.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ms.CreatedAt = value.Time
			}
		case metadataschema.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ms.UpdatedAt = value.Time
			}
		case metadataschema.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ms.Name = value.String
			}
		case metadataschema.FieldAbout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field about", values[i])
			} else if value.Valid {
				ms.About = new(string)
				*ms.About = value.String
			}
		case metadataschema.FieldSchema:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field schema", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.Schema); err != nil {
					return fmt.Errorf("unmarshal field schema: %v", err)
				}
			}
		}
	}
	return nil
}

// QueryMetadata queries the metadata edge of the MetadataSchema.
func (ms *MetadataSchema) QueryMetadata() *MetadataQuery {
	return (&MetadataSchemaClient{config: ms.config}).QueryMetadata(ms)
}

// Update returns a builder for updating this MetadataSchema.
// Note that, you need to call MetadataSchema.Unwrap() before calling this method, if this MetadataSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MetadataSchema) Update() *MetadataSchemaUpdateOne {
	return (&MetadataSchemaClient{config: ms.config}).UpdateOne(ms)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ms *MetadataSchema) Unwrap() *MetadataSchema {
	tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MetadataSchema is not a transactional entity")
	}
	ms.config.driver = tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MetadataSchema) String() string {
	var builder strings.Builder
	builder.WriteString("MetadataSchema(")
	builder.WriteString(fmt.Sprintf("id=%v", ms.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ms.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ms.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(ms.Name)
	if v := ms.About; v != nil {
		builder.WriteString(", about=")
		builder.WriteString(*v)
	}
	builder.WriteString(", schema=")
	builder.WriteString(fmt.Sprintf("%v", ms.Schema))
	builder.WriteByte(')')
	return builder.String()
}

// MetadataSchemas is a parsable slice of MetadataSchema.
type MetadataSchemas []*MetadataSchema

func (ms MetadataSchemas) config(cfg config) {
	for _i := range ms {
		ms[_i].config = cfg
	}
}
