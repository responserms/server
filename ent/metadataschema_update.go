// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/qri-io/jsonschema"
	"github.com/responserms/server/ent/metadata"
	"github.com/responserms/server/ent/metadataschema"
	"github.com/responserms/server/ent/predicate"
)

// MetadataSchemaUpdate is the builder for updating MetadataSchema entities.
type MetadataSchemaUpdate struct {
	config
	hooks    []Hook
	mutation *MetadataSchemaMutation
}

// Where adds a new predicate for the builder.
func (msu *MetadataSchemaUpdate) Where(ps ...predicate.MetadataSchema) *MetadataSchemaUpdate {
	msu.mutation.predicates = append(msu.mutation.predicates, ps...)
	return msu
}

// SetUpdatedAt sets the updated_at field.
func (msu *MetadataSchemaUpdate) SetUpdatedAt(t time.Time) *MetadataSchemaUpdate {
	msu.mutation.SetUpdatedAt(t)
	return msu
}

// SetName sets the name field.
func (msu *MetadataSchemaUpdate) SetName(s string) *MetadataSchemaUpdate {
	msu.mutation.SetName(s)
	return msu
}

// SetAbout sets the about field.
func (msu *MetadataSchemaUpdate) SetAbout(s string) *MetadataSchemaUpdate {
	msu.mutation.SetAbout(s)
	return msu
}

// SetNillableAbout sets the about field if the given value is not nil.
func (msu *MetadataSchemaUpdate) SetNillableAbout(s *string) *MetadataSchemaUpdate {
	if s != nil {
		msu.SetAbout(*s)
	}
	return msu
}

// ClearAbout clears the value of about.
func (msu *MetadataSchemaUpdate) ClearAbout() *MetadataSchemaUpdate {
	msu.mutation.ClearAbout()
	return msu
}

// SetSchema sets the schema field.
func (msu *MetadataSchemaUpdate) SetSchema(j *jsonschema.Schema) *MetadataSchemaUpdate {
	msu.mutation.SetSchema(j)
	return msu
}

// AddMetadatumIDs adds the metadata edge to Metadata by ids.
func (msu *MetadataSchemaUpdate) AddMetadatumIDs(ids ...int) *MetadataSchemaUpdate {
	msu.mutation.AddMetadatumIDs(ids...)
	return msu
}

// AddMetadata adds the metadata edges to Metadata.
func (msu *MetadataSchemaUpdate) AddMetadata(m ...*Metadata) *MetadataSchemaUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return msu.AddMetadatumIDs(ids...)
}

// Mutation returns the MetadataSchemaMutation object of the builder.
func (msu *MetadataSchemaUpdate) Mutation() *MetadataSchemaMutation {
	return msu.mutation
}

// ClearMetadata clears all "metadata" edges to type Metadata.
func (msu *MetadataSchemaUpdate) ClearMetadata() *MetadataSchemaUpdate {
	msu.mutation.ClearMetadata()
	return msu
}

// RemoveMetadatumIDs removes the metadata edge to Metadata by ids.
func (msu *MetadataSchemaUpdate) RemoveMetadatumIDs(ids ...int) *MetadataSchemaUpdate {
	msu.mutation.RemoveMetadatumIDs(ids...)
	return msu
}

// RemoveMetadata removes metadata edges to Metadata.
func (msu *MetadataSchemaUpdate) RemoveMetadata(m ...*Metadata) *MetadataSchemaUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return msu.RemoveMetadatumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MetadataSchemaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	msu.defaults()
	if len(msu.hooks) == 0 {
		affected, err = msu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetadataSchemaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			msu.mutation = mutation
			affected, err = msu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(msu.hooks) - 1; i >= 0; i-- {
			mut = msu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MetadataSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MetadataSchemaUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MetadataSchemaUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msu *MetadataSchemaUpdate) defaults() {
	if _, ok := msu.mutation.UpdatedAt(); !ok {
		v := metadataschema.UpdateDefaultUpdatedAt()
		msu.mutation.SetUpdatedAt(v)
	}
}

func (msu *MetadataSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metadataschema.Table,
			Columns: metadataschema.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metadataschema.FieldID,
			},
		},
	}
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadataschema.FieldUpdatedAt,
		})
	}
	if value, ok := msu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadataschema.FieldName,
		})
	}
	if value, ok := msu.mutation.About(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadataschema.FieldAbout,
		})
	}
	if msu.mutation.AboutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: metadataschema.FieldAbout,
		})
	}
	if value, ok := msu.mutation.Schema(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: metadataschema.FieldSchema,
		})
	}
	if msu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadataschema.MetadataTable,
			Columns: []string{metadataschema.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !msu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadataschema.MetadataTable,
			Columns: []string{metadataschema.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadataschema.MetadataTable,
			Columns: []string{metadataschema.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadataschema.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MetadataSchemaUpdateOne is the builder for updating a single MetadataSchema entity.
type MetadataSchemaUpdateOne struct {
	config
	hooks    []Hook
	mutation *MetadataSchemaMutation
}

// SetUpdatedAt sets the updated_at field.
func (msuo *MetadataSchemaUpdateOne) SetUpdatedAt(t time.Time) *MetadataSchemaUpdateOne {
	msuo.mutation.SetUpdatedAt(t)
	return msuo
}

// SetName sets the name field.
func (msuo *MetadataSchemaUpdateOne) SetName(s string) *MetadataSchemaUpdateOne {
	msuo.mutation.SetName(s)
	return msuo
}

// SetAbout sets the about field.
func (msuo *MetadataSchemaUpdateOne) SetAbout(s string) *MetadataSchemaUpdateOne {
	msuo.mutation.SetAbout(s)
	return msuo
}

// SetNillableAbout sets the about field if the given value is not nil.
func (msuo *MetadataSchemaUpdateOne) SetNillableAbout(s *string) *MetadataSchemaUpdateOne {
	if s != nil {
		msuo.SetAbout(*s)
	}
	return msuo
}

// ClearAbout clears the value of about.
func (msuo *MetadataSchemaUpdateOne) ClearAbout() *MetadataSchemaUpdateOne {
	msuo.mutation.ClearAbout()
	return msuo
}

// SetSchema sets the schema field.
func (msuo *MetadataSchemaUpdateOne) SetSchema(j *jsonschema.Schema) *MetadataSchemaUpdateOne {
	msuo.mutation.SetSchema(j)
	return msuo
}

// AddMetadatumIDs adds the metadata edge to Metadata by ids.
func (msuo *MetadataSchemaUpdateOne) AddMetadatumIDs(ids ...int) *MetadataSchemaUpdateOne {
	msuo.mutation.AddMetadatumIDs(ids...)
	return msuo
}

// AddMetadata adds the metadata edges to Metadata.
func (msuo *MetadataSchemaUpdateOne) AddMetadata(m ...*Metadata) *MetadataSchemaUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return msuo.AddMetadatumIDs(ids...)
}

// Mutation returns the MetadataSchemaMutation object of the builder.
func (msuo *MetadataSchemaUpdateOne) Mutation() *MetadataSchemaMutation {
	return msuo.mutation
}

// ClearMetadata clears all "metadata" edges to type Metadata.
func (msuo *MetadataSchemaUpdateOne) ClearMetadata() *MetadataSchemaUpdateOne {
	msuo.mutation.ClearMetadata()
	return msuo
}

// RemoveMetadatumIDs removes the metadata edge to Metadata by ids.
func (msuo *MetadataSchemaUpdateOne) RemoveMetadatumIDs(ids ...int) *MetadataSchemaUpdateOne {
	msuo.mutation.RemoveMetadatumIDs(ids...)
	return msuo
}

// RemoveMetadata removes metadata edges to Metadata.
func (msuo *MetadataSchemaUpdateOne) RemoveMetadata(m ...*Metadata) *MetadataSchemaUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return msuo.RemoveMetadatumIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (msuo *MetadataSchemaUpdateOne) Save(ctx context.Context) (*MetadataSchema, error) {
	var (
		err  error
		node *MetadataSchema
	)
	msuo.defaults()
	if len(msuo.hooks) == 0 {
		node, err = msuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetadataSchemaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			msuo.mutation = mutation
			node, err = msuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(msuo.hooks) - 1; i >= 0; i-- {
			mut = msuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MetadataSchemaUpdateOne) SaveX(ctx context.Context) *MetadataSchema {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MetadataSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MetadataSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (msuo *MetadataSchemaUpdateOne) defaults() {
	if _, ok := msuo.mutation.UpdatedAt(); !ok {
		v := metadataschema.UpdateDefaultUpdatedAt()
		msuo.mutation.SetUpdatedAt(v)
	}
}

func (msuo *MetadataSchemaUpdateOne) sqlSave(ctx context.Context) (_node *MetadataSchema, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metadataschema.Table,
			Columns: metadataschema.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metadataschema.FieldID,
			},
		},
	}
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MetadataSchema.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := msuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadataschema.FieldUpdatedAt,
		})
	}
	if value, ok := msuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadataschema.FieldName,
		})
	}
	if value, ok := msuo.mutation.About(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadataschema.FieldAbout,
		})
	}
	if msuo.mutation.AboutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: metadataschema.FieldAbout,
		})
	}
	if value, ok := msuo.mutation.Schema(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: metadataschema.FieldSchema,
		})
	}
	if msuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadataschema.MetadataTable,
			Columns: []string{metadataschema.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !msuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadataschema.MetadataTable,
			Columns: []string{metadataschema.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadataschema.MetadataTable,
			Columns: []string{metadataschema.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MetadataSchema{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadataschema.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
