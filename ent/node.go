// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/schema"
	"github.com/facebookincubator/ent-contrib/entgql"
	"github.com/hashicorp/go-multierror"
	"github.com/responserms/server/ent/activation"
	"github.com/responserms/server/ent/authsession"
	"github.com/responserms/server/ent/maplayer"
	"github.com/responserms/server/ent/maptype"
	"github.com/responserms/server/ent/metadata"
	"github.com/responserms/server/ent/metadataschema"
	"github.com/responserms/server/ent/player"
	"github.com/responserms/server/ent/playeridentifier"
	"github.com/responserms/server/ent/server"
	"github.com/responserms/server/ent/servertype"
	"github.com/responserms/server/ent/sessiontoken"
	"github.com/responserms/server/ent/user"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     int      `json:"id,omitempty"`     // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string `json:"type,omitempty"` // edge type.
	Name string `json:"name,omitempty"` // edge name.
	IDs  []int  `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (a *Activation) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     a.ID,
		Type:   "Activation",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(a.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.InternalComments); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "internal_comments",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Comments); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "comments",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "user",
	}
	node.Edges[0].IDs, err = a.QueryUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "User",
		Name: "actor",
	}
	node.Edges[1].IDs, err = a.QueryActor().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (as *AuthSession) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     as.ID,
		Type:   "AuthSession",
		Fields: make([]*Field, 0),
		Edges:  make([]*Edge, 0),
	}
	return node, nil
}

func (ml *MapLayer) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ml.ID,
		Type:   "MapLayer",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(ml.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ml.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ml.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ml.URLTemplate); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "url_template",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ml.IsPublic); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "is_public",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	node.Edges[0].IDs, err = ml.QueryMetadata().
		Select(metadata.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "MapType",
		Name: "map_type",
	}
	node.Edges[1].IDs, err = ml.QueryMapType().
		Select(maptype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (mt *MapType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     mt.ID,
		Type:   "MapType",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(mt.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(mt.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(mt.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(mt.MinZoom); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "min_zoom",
		Value: string(buf),
	}
	if buf, err = json.Marshal(mt.MaxZoom); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "max_zoom",
		Value: string(buf),
	}
	if buf, err = json.Marshal(mt.MinX); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "float64",
		Name:  "min_x",
		Value: string(buf),
	}
	if buf, err = json.Marshal(mt.MinY); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "float64",
		Name:  "min_y",
		Value: string(buf),
	}
	if buf, err = json.Marshal(mt.MaxX); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "float64",
		Name:  "max_x",
		Value: string(buf),
	}
	if buf, err = json.Marshal(mt.MaxY); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "float64",
		Name:  "max_y",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	node.Edges[0].IDs, err = mt.QueryMetadata().
		Select(metadata.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "MapLayer",
		Name: "map_layers",
	}
	node.Edges[1].IDs, err = mt.QueryMapLayers().
		Select(maplayer.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Server",
		Name: "servers",
	}
	node.Edges[2].IDs, err = mt.QueryServers().
		Select(server.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (m *Metadata) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     m.ID,
		Type:   "Metadata",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(m.Data); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "map[string]interface {}",
		Name:  "data",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "MetadataSchema",
		Name: "schema",
	}
	node.Edges[0].IDs, err = m.QuerySchema().
		Select(metadataschema.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "User",
		Name: "user",
	}
	node.Edges[1].IDs, err = m.QueryUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "MapType",
		Name: "map_type",
	}
	node.Edges[2].IDs, err = m.QueryMapType().
		Select(maptype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ms *MetadataSchema) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ms.ID,
		Type:   "MetadataSchema",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ms.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ms.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ms.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ms.About); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "about",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ms.Schema); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "*jsonschema.Schema",
		Name:  "schema",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	node.Edges[0].IDs, err = ms.QueryMetadata().
		Select(metadata.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pl *Player) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pl.ID,
		Type:   "Player",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(pl.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.TotalMinutes); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "total_minutes",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.SessionStartedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "session_started_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.SessionEndedAt); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "session_ended_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.LastSeenAt); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "time.Time",
		Name:  "last_seen_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	node.Edges[0].IDs, err = pl.QueryMetadata().
		Select(metadata.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Server",
		Name: "servers",
	}
	node.Edges[1].IDs, err = pl.QueryServers().
		Select(server.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "User",
		Name: "user",
	}
	node.Edges[2].IDs, err = pl.QueryUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "PlayerIdentifier",
		Name: "identifiers",
	}
	node.Edges[3].IDs, err = pl.QueryIdentifiers().
		Select(playeridentifier.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pi *PlayerIdentifier) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pi.ID,
		Type:   "PlayerIdentifier",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(pi.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pi.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pi.Type); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pi.Identifier); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "identifier",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	node.Edges[0].IDs, err = pi.QueryMetadata().
		Select(metadata.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Player",
		Name: "player",
	}
	node.Edges[1].IDs, err = pi.QueryPlayer().
		Select(player.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Server) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Server",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.APIUsername); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "api_username",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.APISecret); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "api_secret",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.APIAddress); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "api_address",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.APIPort); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "api_port",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	node.Edges[0].IDs, err = s.QueryMetadata().
		Select(metadata.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ServerType",
		Name: "server_type",
	}
	node.Edges[1].IDs, err = s.QueryServerType().
		Select(servertype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "MapType",
		Name: "map_type",
	}
	node.Edges[2].IDs, err = s.QueryMapType().
		Select(maptype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Player",
		Name: "players",
	}
	node.Edges[3].IDs, err = s.QueryPlayers().
		Select(player.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (st *ServerType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     st.ID,
		Type:   "ServerType",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(st.Key); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "key",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.Description); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Server",
		Name: "servers",
	}
	node.Edges[0].IDs, err = st.QueryServers().
		Select(server.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (st *SessionToken) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     st.ID,
		Type:   "SessionToken",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(st.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.BlockedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "blocked_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.ExpiredAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "expired_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "user",
	}
	node.Edges[0].IDs, err = st.QueryUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (u *User) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     u.ID,
		Type:   "User",
		Fields: make([]*Field, 10),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(u.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Email); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Password); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.IsSystem); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "is_system",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.DisabledAt); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "time.Time",
		Name:  "disabled_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.DisabledReason); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "disabled_reason",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.ActivatedAt); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "time.Time",
		Name:  "activated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.ActivationComment); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "activation_comment",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	node.Edges[0].IDs, err = u.QueryMetadata().
		Select(metadata.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "SessionToken",
		Name: "session_tokens",
	}
	node.Edges[1].IDs, err = u.QuerySessionTokens().
		Select(sessiontoken.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Activation",
		Name: "activation",
	}
	node.Edges[2].IDs, err = u.QueryActivation().
		Select(activation.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Activation",
		Name: "activations",
	}
	node.Edges[3].IDs, err = u.QueryActivations().
		Select(activation.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Player",
		Name: "players",
	}
	node.Edges[4].IDs, err = u.QueryPlayers().
		Select(player.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id int) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, int) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, int) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, int) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id int) (string, error) {
			return c.tables.nodeType(ctx, c.driver, id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(pet.Table))
//
func (c *Client) Noder(ctx context.Context, id int, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id int) (Noder, error) {
	switch table {
	case activation.Table:
		n, err := c.Activation.Query().
			Where(activation.ID(id)).
			CollectFields(ctx, "Activation").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case authsession.Table:
		n, err := c.AuthSession.Query().
			Where(authsession.ID(id)).
			CollectFields(ctx, "AuthSession").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case maplayer.Table:
		n, err := c.MapLayer.Query().
			Where(maplayer.ID(id)).
			CollectFields(ctx, "MapLayer").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case maptype.Table:
		n, err := c.MapType.Query().
			Where(maptype.ID(id)).
			CollectFields(ctx, "MapType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case metadata.Table:
		n, err := c.Metadata.Query().
			Where(metadata.ID(id)).
			CollectFields(ctx, "Metadata").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case metadataschema.Table:
		n, err := c.MetadataSchema.Query().
			Where(metadataschema.ID(id)).
			CollectFields(ctx, "MetadataSchema").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case player.Table:
		n, err := c.Player.Query().
			Where(player.ID(id)).
			CollectFields(ctx, "Player").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case playeridentifier.Table:
		n, err := c.PlayerIdentifier.Query().
			Where(playeridentifier.ID(id)).
			CollectFields(ctx, "PlayerIdentifier").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case server.Table:
		n, err := c.Server.Query().
			Where(server.ID(id)).
			CollectFields(ctx, "Server").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case servertype.Table:
		n, err := c.ServerType.Query().
			Where(servertype.ID(id)).
			CollectFields(ctx, "ServerType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case sessiontoken.Table:
		n, err := c.SessionToken.Query().
			Where(sessiontoken.ID(id)).
			CollectFields(ctx, "SessionToken").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case user.Table:
		n, err := c.User.Query().
			Where(user.ID(id)).
			CollectFields(ctx, "User").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []int, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int)
	id2idx := make(map[int][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []int) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[int][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case activation.Table:
		nodes, err := c.Activation.Query().
			Where(activation.IDIn(ids...)).
			CollectFields(ctx, "Activation").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case authsession.Table:
		nodes, err := c.AuthSession.Query().
			Where(authsession.IDIn(ids...)).
			CollectFields(ctx, "AuthSession").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case maplayer.Table:
		nodes, err := c.MapLayer.Query().
			Where(maplayer.IDIn(ids...)).
			CollectFields(ctx, "MapLayer").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case maptype.Table:
		nodes, err := c.MapType.Query().
			Where(maptype.IDIn(ids...)).
			CollectFields(ctx, "MapType").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case metadata.Table:
		nodes, err := c.Metadata.Query().
			Where(metadata.IDIn(ids...)).
			CollectFields(ctx, "Metadata").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case metadataschema.Table:
		nodes, err := c.MetadataSchema.Query().
			Where(metadataschema.IDIn(ids...)).
			CollectFields(ctx, "MetadataSchema").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case player.Table:
		nodes, err := c.Player.Query().
			Where(player.IDIn(ids...)).
			CollectFields(ctx, "Player").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case playeridentifier.Table:
		nodes, err := c.PlayerIdentifier.Query().
			Where(playeridentifier.IDIn(ids...)).
			CollectFields(ctx, "PlayerIdentifier").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case server.Table:
		nodes, err := c.Server.Query().
			Where(server.IDIn(ids...)).
			CollectFields(ctx, "Server").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case servertype.Table:
		nodes, err := c.ServerType.Query().
			Where(servertype.IDIn(ids...)).
			CollectFields(ctx, "ServerType").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case sessiontoken.Table:
		nodes, err := c.SessionToken.Query().
			Where(sessiontoken.IDIn(ids...)).
			CollectFields(ctx, "SessionToken").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		nodes, err := c.User.Query().
			Where(user.IDIn(ids...)).
			CollectFields(ctx, "User").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}
