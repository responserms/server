// Code generated by entc, DO NOT EDIT.

package playeridentifier

import (
	"time"
)

const (
	// Label holds the string label denoting the playeridentifier type in the database.
	Label = "player_identifier"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"

	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"

	// Table holds the table name of the playeridentifier in the database.
	Table = "player_identifiers"
	// MetadataTable is the table the holds the metadata relation/edge.
	MetadataTable = "player_identifiers"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "player_identifier_metadata"
	// PlayerTable is the table the holds the player relation/edge.
	PlayerTable = "player_identifiers"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_identifier_player"
)

// Columns holds all SQL columns for playeridentifier fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldType,
	FieldIdentifier,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the PlayerIdentifier type.
var ForeignKeys = []string{
	"player_identifier_metadata",
	"player_identifier_player",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
)
