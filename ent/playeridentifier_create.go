// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/metadata"
	"github.com/responserms/server/ent/player"
	"github.com/responserms/server/ent/playeridentifier"
)

// PlayerIdentifierCreate is the builder for creating a PlayerIdentifier entity.
type PlayerIdentifierCreate struct {
	config
	mutation *PlayerIdentifierMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (pic *PlayerIdentifierCreate) SetCreatedAt(t time.Time) *PlayerIdentifierCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pic *PlayerIdentifierCreate) SetNillableCreatedAt(t *time.Time) *PlayerIdentifierCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetUpdatedAt sets the updated_at field.
func (pic *PlayerIdentifierCreate) SetUpdatedAt(t time.Time) *PlayerIdentifierCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pic *PlayerIdentifierCreate) SetNillableUpdatedAt(t *time.Time) *PlayerIdentifierCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// SetType sets the type field.
func (pic *PlayerIdentifierCreate) SetType(s string) *PlayerIdentifierCreate {
	pic.mutation.SetType(s)
	return pic
}

// SetIdentifier sets the identifier field.
func (pic *PlayerIdentifierCreate) SetIdentifier(s string) *PlayerIdentifierCreate {
	pic.mutation.SetIdentifier(s)
	return pic
}

// SetMetadataID sets the metadata edge to Metadata by id.
func (pic *PlayerIdentifierCreate) SetMetadataID(id int) *PlayerIdentifierCreate {
	pic.mutation.SetMetadataID(id)
	return pic
}

// SetNillableMetadataID sets the metadata edge to Metadata by id if the given value is not nil.
func (pic *PlayerIdentifierCreate) SetNillableMetadataID(id *int) *PlayerIdentifierCreate {
	if id != nil {
		pic = pic.SetMetadataID(*id)
	}
	return pic
}

// SetMetadata sets the metadata edge to Metadata.
func (pic *PlayerIdentifierCreate) SetMetadata(m *Metadata) *PlayerIdentifierCreate {
	return pic.SetMetadataID(m.ID)
}

// SetPlayerID sets the player edge to Player by id.
func (pic *PlayerIdentifierCreate) SetPlayerID(id int) *PlayerIdentifierCreate {
	pic.mutation.SetPlayerID(id)
	return pic
}

// SetNillablePlayerID sets the player edge to Player by id if the given value is not nil.
func (pic *PlayerIdentifierCreate) SetNillablePlayerID(id *int) *PlayerIdentifierCreate {
	if id != nil {
		pic = pic.SetPlayerID(*id)
	}
	return pic
}

// SetPlayer sets the player edge to Player.
func (pic *PlayerIdentifierCreate) SetPlayer(p *Player) *PlayerIdentifierCreate {
	return pic.SetPlayerID(p.ID)
}

// Mutation returns the PlayerIdentifierMutation object of the builder.
func (pic *PlayerIdentifierCreate) Mutation() *PlayerIdentifierMutation {
	return pic.mutation
}

// Save creates the PlayerIdentifier in the database.
func (pic *PlayerIdentifierCreate) Save(ctx context.Context) (*PlayerIdentifier, error) {
	var (
		err  error
		node *PlayerIdentifier
	)
	pic.defaults()
	if len(pic.hooks) == 0 {
		if err = pic.check(); err != nil {
			return nil, err
		}
		node, err = pic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlayerIdentifierMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pic.check(); err != nil {
				return nil, err
			}
			pic.mutation = mutation
			node, err = pic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pic.hooks) - 1; i >= 0; i-- {
			mut = pic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PlayerIdentifierCreate) SaveX(ctx context.Context) *PlayerIdentifier {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pic *PlayerIdentifierCreate) defaults() {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		v := playeridentifier.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		v := playeridentifier.DefaultUpdatedAt()
		pic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PlayerIdentifierCreate) check() error {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := pic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := pic.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New("ent: missing required field \"identifier\"")}
	}
	return nil
}

func (pic *PlayerIdentifierCreate) sqlSave(ctx context.Context) (*PlayerIdentifier, error) {
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pic *PlayerIdentifierCreate) createSpec() (*PlayerIdentifier, *sqlgraph.CreateSpec) {
	var (
		_node = &PlayerIdentifier{config: pic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: playeridentifier.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: playeridentifier.FieldID,
			},
		}
	)
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: playeridentifier.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: playeridentifier.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pic.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: playeridentifier.FieldType,
		})
		_node.Type = value
	}
	if value, ok := pic.mutation.Identifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: playeridentifier.FieldIdentifier,
		})
		_node.Identifier = value
	}
	if nodes := pic.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playeridentifier.MetadataTable,
			Columns: []string{playeridentifier.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playeridentifier.PlayerTable,
			Columns: []string{playeridentifier.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlayerIdentifierCreateBulk is the builder for creating a bulk of PlayerIdentifier entities.
type PlayerIdentifierCreateBulk struct {
	config
	builders []*PlayerIdentifierCreate
}

// Save creates the PlayerIdentifier entities in the database.
func (picb *PlayerIdentifierCreateBulk) Save(ctx context.Context) ([]*PlayerIdentifier, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PlayerIdentifier, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlayerIdentifierMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (picb *PlayerIdentifierCreateBulk) SaveX(ctx context.Context) []*PlayerIdentifier {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
