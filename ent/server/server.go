// Code generated by entc, DO NOT EDIT.

package server

import (
	"time"
)

const (
	// Label holds the string label denoting the server type in the database.
	Label = "server"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAPIUsername holds the string denoting the api_username field in the database.
	FieldAPIUsername = "api_username"
	// FieldAPISecret holds the string denoting the api_secret field in the database.
	FieldAPISecret = "api_secret"
	// FieldAPIAddress holds the string denoting the api_address field in the database.
	FieldAPIAddress = "api_address"
	// FieldAPIPort holds the string denoting the api_port field in the database.
	FieldAPIPort = "api_port"

	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgeServerType holds the string denoting the server_type edge name in mutations.
	EdgeServerType = "server_type"
	// EdgeMapType holds the string denoting the map_type edge name in mutations.
	EdgeMapType = "map_type"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"

	// Table holds the table name of the server in the database.
	Table = "servers"
	// MetadataTable is the table the holds the metadata relation/edge.
	MetadataTable = "servers"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "server_metadata"
	// ServerTypeTable is the table the holds the server_type relation/edge.
	ServerTypeTable = "servers"
	// ServerTypeInverseTable is the table name for the ServerType entity.
	// It exists in this package in order to avoid circular dependency with the "servertype" package.
	ServerTypeInverseTable = "server_types"
	// ServerTypeColumn is the table column denoting the server_type relation/edge.
	ServerTypeColumn = "server_server_type"
	// MapTypeTable is the table the holds the map_type relation/edge.
	MapTypeTable = "servers"
	// MapTypeInverseTable is the table name for the MapType entity.
	// It exists in this package in order to avoid circular dependency with the "maptype" package.
	MapTypeInverseTable = "map_types"
	// MapTypeColumn is the table column denoting the map_type relation/edge.
	MapTypeColumn = "server_map_type"
	// PlayersTable is the table the holds the players relation/edge. The primary key declared below.
	PlayersTable = "player_servers"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
)

// Columns holds all SQL columns for server fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldAPIUsername,
	FieldAPISecret,
	FieldAPIAddress,
	FieldAPIPort,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Server type.
var ForeignKeys = []string{
	"server_metadata",
	"server_server_type",
	"server_map_type",
}

var (
	// PlayersPrimaryKey and PlayersColumn2 are the table columns denoting the
	// primary key for the players relation (M2M).
	PlayersPrimaryKey = []string{"player_id", "server_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
)
