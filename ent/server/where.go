// Code generated by entc, DO NOT EDIT.

package server

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/responserms/server/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// APIUsername applies equality check predicate on the "api_username" field. It's identical to APIUsernameEQ.
func APIUsername(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPIUsername), v))
	})
}

// APISecret applies equality check predicate on the "api_secret" field. It's identical to APISecretEQ.
func APISecret(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPISecret), v))
	})
}

// APIAddress applies equality check predicate on the "api_address" field. It's identical to APIAddressEQ.
func APIAddress(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPIAddress), v))
	})
}

// APIPort applies equality check predicate on the "api_port" field. It's identical to APIPortEQ.
func APIPort(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPIPort), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// APIUsernameEQ applies the EQ predicate on the "api_username" field.
func APIUsernameEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPIUsername), v))
	})
}

// APIUsernameNEQ applies the NEQ predicate on the "api_username" field.
func APIUsernameNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAPIUsername), v))
	})
}

// APIUsernameIn applies the In predicate on the "api_username" field.
func APIUsernameIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAPIUsername), v...))
	})
}

// APIUsernameNotIn applies the NotIn predicate on the "api_username" field.
func APIUsernameNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAPIUsername), v...))
	})
}

// APIUsernameGT applies the GT predicate on the "api_username" field.
func APIUsernameGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAPIUsername), v))
	})
}

// APIUsernameGTE applies the GTE predicate on the "api_username" field.
func APIUsernameGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAPIUsername), v))
	})
}

// APIUsernameLT applies the LT predicate on the "api_username" field.
func APIUsernameLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAPIUsername), v))
	})
}

// APIUsernameLTE applies the LTE predicate on the "api_username" field.
func APIUsernameLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAPIUsername), v))
	})
}

// APIUsernameContains applies the Contains predicate on the "api_username" field.
func APIUsernameContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAPIUsername), v))
	})
}

// APIUsernameHasPrefix applies the HasPrefix predicate on the "api_username" field.
func APIUsernameHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAPIUsername), v))
	})
}

// APIUsernameHasSuffix applies the HasSuffix predicate on the "api_username" field.
func APIUsernameHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAPIUsername), v))
	})
}

// APIUsernameIsNil applies the IsNil predicate on the "api_username" field.
func APIUsernameIsNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAPIUsername)))
	})
}

// APIUsernameNotNil applies the NotNil predicate on the "api_username" field.
func APIUsernameNotNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAPIUsername)))
	})
}

// APIUsernameEqualFold applies the EqualFold predicate on the "api_username" field.
func APIUsernameEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAPIUsername), v))
	})
}

// APIUsernameContainsFold applies the ContainsFold predicate on the "api_username" field.
func APIUsernameContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAPIUsername), v))
	})
}

// APISecretEQ applies the EQ predicate on the "api_secret" field.
func APISecretEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPISecret), v))
	})
}

// APISecretNEQ applies the NEQ predicate on the "api_secret" field.
func APISecretNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAPISecret), v))
	})
}

// APISecretIn applies the In predicate on the "api_secret" field.
func APISecretIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAPISecret), v...))
	})
}

// APISecretNotIn applies the NotIn predicate on the "api_secret" field.
func APISecretNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAPISecret), v...))
	})
}

// APISecretGT applies the GT predicate on the "api_secret" field.
func APISecretGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAPISecret), v))
	})
}

// APISecretGTE applies the GTE predicate on the "api_secret" field.
func APISecretGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAPISecret), v))
	})
}

// APISecretLT applies the LT predicate on the "api_secret" field.
func APISecretLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAPISecret), v))
	})
}

// APISecretLTE applies the LTE predicate on the "api_secret" field.
func APISecretLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAPISecret), v))
	})
}

// APISecretContains applies the Contains predicate on the "api_secret" field.
func APISecretContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAPISecret), v))
	})
}

// APISecretHasPrefix applies the HasPrefix predicate on the "api_secret" field.
func APISecretHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAPISecret), v))
	})
}

// APISecretHasSuffix applies the HasSuffix predicate on the "api_secret" field.
func APISecretHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAPISecret), v))
	})
}

// APISecretIsNil applies the IsNil predicate on the "api_secret" field.
func APISecretIsNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAPISecret)))
	})
}

// APISecretNotNil applies the NotNil predicate on the "api_secret" field.
func APISecretNotNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAPISecret)))
	})
}

// APISecretEqualFold applies the EqualFold predicate on the "api_secret" field.
func APISecretEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAPISecret), v))
	})
}

// APISecretContainsFold applies the ContainsFold predicate on the "api_secret" field.
func APISecretContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAPISecret), v))
	})
}

// APIAddressEQ applies the EQ predicate on the "api_address" field.
func APIAddressEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPIAddress), v))
	})
}

// APIAddressNEQ applies the NEQ predicate on the "api_address" field.
func APIAddressNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAPIAddress), v))
	})
}

// APIAddressIn applies the In predicate on the "api_address" field.
func APIAddressIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAPIAddress), v...))
	})
}

// APIAddressNotIn applies the NotIn predicate on the "api_address" field.
func APIAddressNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAPIAddress), v...))
	})
}

// APIAddressGT applies the GT predicate on the "api_address" field.
func APIAddressGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAPIAddress), v))
	})
}

// APIAddressGTE applies the GTE predicate on the "api_address" field.
func APIAddressGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAPIAddress), v))
	})
}

// APIAddressLT applies the LT predicate on the "api_address" field.
func APIAddressLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAPIAddress), v))
	})
}

// APIAddressLTE applies the LTE predicate on the "api_address" field.
func APIAddressLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAPIAddress), v))
	})
}

// APIAddressContains applies the Contains predicate on the "api_address" field.
func APIAddressContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAPIAddress), v))
	})
}

// APIAddressHasPrefix applies the HasPrefix predicate on the "api_address" field.
func APIAddressHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAPIAddress), v))
	})
}

// APIAddressHasSuffix applies the HasSuffix predicate on the "api_address" field.
func APIAddressHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAPIAddress), v))
	})
}

// APIAddressIsNil applies the IsNil predicate on the "api_address" field.
func APIAddressIsNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAPIAddress)))
	})
}

// APIAddressNotNil applies the NotNil predicate on the "api_address" field.
func APIAddressNotNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAPIAddress)))
	})
}

// APIAddressEqualFold applies the EqualFold predicate on the "api_address" field.
func APIAddressEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAPIAddress), v))
	})
}

// APIAddressContainsFold applies the ContainsFold predicate on the "api_address" field.
func APIAddressContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAPIAddress), v))
	})
}

// APIPortEQ applies the EQ predicate on the "api_port" field.
func APIPortEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPIPort), v))
	})
}

// APIPortNEQ applies the NEQ predicate on the "api_port" field.
func APIPortNEQ(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAPIPort), v))
	})
}

// APIPortIn applies the In predicate on the "api_port" field.
func APIPortIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAPIPort), v...))
	})
}

// APIPortNotIn applies the NotIn predicate on the "api_port" field.
func APIPortNotIn(vs ...string) predicate.Server {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Server(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAPIPort), v...))
	})
}

// APIPortGT applies the GT predicate on the "api_port" field.
func APIPortGT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAPIPort), v))
	})
}

// APIPortGTE applies the GTE predicate on the "api_port" field.
func APIPortGTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAPIPort), v))
	})
}

// APIPortLT applies the LT predicate on the "api_port" field.
func APIPortLT(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAPIPort), v))
	})
}

// APIPortLTE applies the LTE predicate on the "api_port" field.
func APIPortLTE(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAPIPort), v))
	})
}

// APIPortContains applies the Contains predicate on the "api_port" field.
func APIPortContains(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAPIPort), v))
	})
}

// APIPortHasPrefix applies the HasPrefix predicate on the "api_port" field.
func APIPortHasPrefix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAPIPort), v))
	})
}

// APIPortHasSuffix applies the HasSuffix predicate on the "api_port" field.
func APIPortHasSuffix(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAPIPort), v))
	})
}

// APIPortIsNil applies the IsNil predicate on the "api_port" field.
func APIPortIsNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAPIPort)))
	})
}

// APIPortNotNil applies the NotNil predicate on the "api_port" field.
func APIPortNotNil() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAPIPort)))
	})
}

// APIPortEqualFold applies the EqualFold predicate on the "api_port" field.
func APIPortEqualFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAPIPort), v))
	})
}

// APIPortContainsFold applies the ContainsFold predicate on the "api_port" field.
func APIPortContainsFold(v string) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAPIPort), v))
	})
}

// HasMetadata applies the HasEdge predicate on the "metadata" edge.
func HasMetadata() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataWith applies the HasEdge predicate on the "metadata" edge with a given conditions (other predicates).
func HasMetadataWith(preds ...predicate.Metadata) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServerType applies the HasEdge predicate on the "server_type" edge.
func HasServerType() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServerTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServerTypeTable, ServerTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerTypeWith applies the HasEdge predicate on the "server_type" edge with a given conditions (other predicates).
func HasServerTypeWith(preds ...predicate.ServerType) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServerTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServerTypeTable, ServerTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMapType applies the HasEdge predicate on the "map_type" edge.
func HasMapType() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MapTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MapTypeTable, MapTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMapTypeWith applies the HasEdge predicate on the "map_type" edge with a given conditions (other predicates).
func HasMapTypeWith(preds ...predicate.MapType) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MapTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MapTypeTable, MapTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayers applies the HasEdge predicate on the "players" edge.
func HasPlayers() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlayersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PlayersTable, PlayersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayersWith applies the HasEdge predicate on the "players" edge with a given conditions (other predicates).
func HasPlayersWith(preds ...predicate.Player) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlayersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PlayersTable, PlayersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Server) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		p(s.Not())
	})
}
