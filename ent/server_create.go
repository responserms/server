// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/maptype"
	"github.com/responserms/server/ent/metadata"
	"github.com/responserms/server/ent/player"
	"github.com/responserms/server/ent/server"
	"github.com/responserms/server/ent/servertype"
)

// ServerCreate is the builder for creating a Server entity.
type ServerCreate struct {
	config
	mutation *ServerMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (sc *ServerCreate) SetCreatedAt(t time.Time) *ServerCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (sc *ServerCreate) SetNillableCreatedAt(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the updated_at field.
func (sc *ServerCreate) SetUpdatedAt(t time.Time) *ServerCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (sc *ServerCreate) SetNillableUpdatedAt(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetName sets the name field.
func (sc *ServerCreate) SetName(s string) *ServerCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetAPIUsername sets the api_username field.
func (sc *ServerCreate) SetAPIUsername(s string) *ServerCreate {
	sc.mutation.SetAPIUsername(s)
	return sc
}

// SetNillableAPIUsername sets the api_username field if the given value is not nil.
func (sc *ServerCreate) SetNillableAPIUsername(s *string) *ServerCreate {
	if s != nil {
		sc.SetAPIUsername(*s)
	}
	return sc
}

// SetAPISecret sets the api_secret field.
func (sc *ServerCreate) SetAPISecret(s string) *ServerCreate {
	sc.mutation.SetAPISecret(s)
	return sc
}

// SetNillableAPISecret sets the api_secret field if the given value is not nil.
func (sc *ServerCreate) SetNillableAPISecret(s *string) *ServerCreate {
	if s != nil {
		sc.SetAPISecret(*s)
	}
	return sc
}

// SetAPIAddress sets the api_address field.
func (sc *ServerCreate) SetAPIAddress(s string) *ServerCreate {
	sc.mutation.SetAPIAddress(s)
	return sc
}

// SetNillableAPIAddress sets the api_address field if the given value is not nil.
func (sc *ServerCreate) SetNillableAPIAddress(s *string) *ServerCreate {
	if s != nil {
		sc.SetAPIAddress(*s)
	}
	return sc
}

// SetAPIPort sets the api_port field.
func (sc *ServerCreate) SetAPIPort(s string) *ServerCreate {
	sc.mutation.SetAPIPort(s)
	return sc
}

// SetNillableAPIPort sets the api_port field if the given value is not nil.
func (sc *ServerCreate) SetNillableAPIPort(s *string) *ServerCreate {
	if s != nil {
		sc.SetAPIPort(*s)
	}
	return sc
}

// SetMetadataID sets the metadata edge to Metadata by id.
func (sc *ServerCreate) SetMetadataID(id int) *ServerCreate {
	sc.mutation.SetMetadataID(id)
	return sc
}

// SetNillableMetadataID sets the metadata edge to Metadata by id if the given value is not nil.
func (sc *ServerCreate) SetNillableMetadataID(id *int) *ServerCreate {
	if id != nil {
		sc = sc.SetMetadataID(*id)
	}
	return sc
}

// SetMetadata sets the metadata edge to Metadata.
func (sc *ServerCreate) SetMetadata(m *Metadata) *ServerCreate {
	return sc.SetMetadataID(m.ID)
}

// SetServerTypeID sets the server_type edge to ServerType by id.
func (sc *ServerCreate) SetServerTypeID(id int) *ServerCreate {
	sc.mutation.SetServerTypeID(id)
	return sc
}

// SetNillableServerTypeID sets the server_type edge to ServerType by id if the given value is not nil.
func (sc *ServerCreate) SetNillableServerTypeID(id *int) *ServerCreate {
	if id != nil {
		sc = sc.SetServerTypeID(*id)
	}
	return sc
}

// SetServerType sets the server_type edge to ServerType.
func (sc *ServerCreate) SetServerType(s *ServerType) *ServerCreate {
	return sc.SetServerTypeID(s.ID)
}

// SetMapTypeID sets the map_type edge to MapType by id.
func (sc *ServerCreate) SetMapTypeID(id int) *ServerCreate {
	sc.mutation.SetMapTypeID(id)
	return sc
}

// SetNillableMapTypeID sets the map_type edge to MapType by id if the given value is not nil.
func (sc *ServerCreate) SetNillableMapTypeID(id *int) *ServerCreate {
	if id != nil {
		sc = sc.SetMapTypeID(*id)
	}
	return sc
}

// SetMapType sets the map_type edge to MapType.
func (sc *ServerCreate) SetMapType(m *MapType) *ServerCreate {
	return sc.SetMapTypeID(m.ID)
}

// AddPlayerIDs adds the players edge to Player by ids.
func (sc *ServerCreate) AddPlayerIDs(ids ...int) *ServerCreate {
	sc.mutation.AddPlayerIDs(ids...)
	return sc
}

// AddPlayers adds the players edges to Player.
func (sc *ServerCreate) AddPlayers(p ...*Player) *ServerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddPlayerIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (sc *ServerCreate) Mutation() *ServerMutation {
	return sc.mutation
}

// Save creates the Server in the database.
func (sc *ServerCreate) Save(ctx context.Context) (*Server, error) {
	var (
		err  error
		node *Server
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServerCreate) SaveX(ctx context.Context) *Server {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sc *ServerCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := server.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := server.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ServerCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	return nil
}

func (sc *ServerCreate) sqlSave(ctx context.Context) (*Server, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *ServerCreate) createSpec() (*Server, *sqlgraph.CreateSpec) {
	var (
		_node = &Server{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: server.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: server.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: server.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: server.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.APIUsername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPIUsername,
		})
		_node.APIUsername = &value
	}
	if value, ok := sc.mutation.APISecret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPISecret,
		})
		_node.APISecret = &value
	}
	if value, ok := sc.mutation.APIAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPIAddress,
		})
		_node.APIAddress = &value
	}
	if value, ok := sc.mutation.APIPort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPIPort,
		})
		_node.APIPort = &value
	}
	if nodes := sc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.MetadataTable,
			Columns: []string{server.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ServerTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.ServerTypeTable,
			Columns: []string{server.ServerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.MapTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.MapTypeTable,
			Columns: []string{server.MapTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   server.PlayersTable,
			Columns: server.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServerCreateBulk is the builder for creating a bulk of Server entities.
type ServerCreateBulk struct {
	config
	builders []*ServerCreate
}

// Save creates the Server entities in the database.
func (scb *ServerCreateBulk) Save(ctx context.Context) ([]*Server, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Server, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (scb *ServerCreateBulk) SaveX(ctx context.Context) []*Server {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
