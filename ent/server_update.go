// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/maptype"
	"github.com/responserms/server/ent/metadata"
	"github.com/responserms/server/ent/player"
	"github.com/responserms/server/ent/predicate"
	"github.com/responserms/server/ent/server"
	"github.com/responserms/server/ent/servertype"
)

// ServerUpdate is the builder for updating Server entities.
type ServerUpdate struct {
	config
	hooks    []Hook
	mutation *ServerMutation
}

// Where adds a new predicate for the builder.
func (su *ServerUpdate) Where(ps ...predicate.Server) *ServerUpdate {
	su.mutation.predicates = append(su.mutation.predicates, ps...)
	return su
}

// SetUpdatedAt sets the updated_at field.
func (su *ServerUpdate) SetUpdatedAt(t time.Time) *ServerUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetName sets the name field.
func (su *ServerUpdate) SetName(s string) *ServerUpdate {
	su.mutation.SetName(s)
	return su
}

// SetAPIUsername sets the api_username field.
func (su *ServerUpdate) SetAPIUsername(s string) *ServerUpdate {
	su.mutation.SetAPIUsername(s)
	return su
}

// SetNillableAPIUsername sets the api_username field if the given value is not nil.
func (su *ServerUpdate) SetNillableAPIUsername(s *string) *ServerUpdate {
	if s != nil {
		su.SetAPIUsername(*s)
	}
	return su
}

// ClearAPIUsername clears the value of api_username.
func (su *ServerUpdate) ClearAPIUsername() *ServerUpdate {
	su.mutation.ClearAPIUsername()
	return su
}

// SetAPISecret sets the api_secret field.
func (su *ServerUpdate) SetAPISecret(s string) *ServerUpdate {
	su.mutation.SetAPISecret(s)
	return su
}

// SetNillableAPISecret sets the api_secret field if the given value is not nil.
func (su *ServerUpdate) SetNillableAPISecret(s *string) *ServerUpdate {
	if s != nil {
		su.SetAPISecret(*s)
	}
	return su
}

// ClearAPISecret clears the value of api_secret.
func (su *ServerUpdate) ClearAPISecret() *ServerUpdate {
	su.mutation.ClearAPISecret()
	return su
}

// SetAPIAddress sets the api_address field.
func (su *ServerUpdate) SetAPIAddress(s string) *ServerUpdate {
	su.mutation.SetAPIAddress(s)
	return su
}

// SetNillableAPIAddress sets the api_address field if the given value is not nil.
func (su *ServerUpdate) SetNillableAPIAddress(s *string) *ServerUpdate {
	if s != nil {
		su.SetAPIAddress(*s)
	}
	return su
}

// ClearAPIAddress clears the value of api_address.
func (su *ServerUpdate) ClearAPIAddress() *ServerUpdate {
	su.mutation.ClearAPIAddress()
	return su
}

// SetAPIPort sets the api_port field.
func (su *ServerUpdate) SetAPIPort(s string) *ServerUpdate {
	su.mutation.SetAPIPort(s)
	return su
}

// SetNillableAPIPort sets the api_port field if the given value is not nil.
func (su *ServerUpdate) SetNillableAPIPort(s *string) *ServerUpdate {
	if s != nil {
		su.SetAPIPort(*s)
	}
	return su
}

// ClearAPIPort clears the value of api_port.
func (su *ServerUpdate) ClearAPIPort() *ServerUpdate {
	su.mutation.ClearAPIPort()
	return su
}

// SetMetadataID sets the metadata edge to Metadata by id.
func (su *ServerUpdate) SetMetadataID(id int) *ServerUpdate {
	su.mutation.SetMetadataID(id)
	return su
}

// SetNillableMetadataID sets the metadata edge to Metadata by id if the given value is not nil.
func (su *ServerUpdate) SetNillableMetadataID(id *int) *ServerUpdate {
	if id != nil {
		su = su.SetMetadataID(*id)
	}
	return su
}

// SetMetadata sets the metadata edge to Metadata.
func (su *ServerUpdate) SetMetadata(m *Metadata) *ServerUpdate {
	return su.SetMetadataID(m.ID)
}

// SetServerTypeID sets the server_type edge to ServerType by id.
func (su *ServerUpdate) SetServerTypeID(id int) *ServerUpdate {
	su.mutation.SetServerTypeID(id)
	return su
}

// SetNillableServerTypeID sets the server_type edge to ServerType by id if the given value is not nil.
func (su *ServerUpdate) SetNillableServerTypeID(id *int) *ServerUpdate {
	if id != nil {
		su = su.SetServerTypeID(*id)
	}
	return su
}

// SetServerType sets the server_type edge to ServerType.
func (su *ServerUpdate) SetServerType(s *ServerType) *ServerUpdate {
	return su.SetServerTypeID(s.ID)
}

// SetMapTypeID sets the map_type edge to MapType by id.
func (su *ServerUpdate) SetMapTypeID(id int) *ServerUpdate {
	su.mutation.SetMapTypeID(id)
	return su
}

// SetNillableMapTypeID sets the map_type edge to MapType by id if the given value is not nil.
func (su *ServerUpdate) SetNillableMapTypeID(id *int) *ServerUpdate {
	if id != nil {
		su = su.SetMapTypeID(*id)
	}
	return su
}

// SetMapType sets the map_type edge to MapType.
func (su *ServerUpdate) SetMapType(m *MapType) *ServerUpdate {
	return su.SetMapTypeID(m.ID)
}

// AddPlayerIDs adds the players edge to Player by ids.
func (su *ServerUpdate) AddPlayerIDs(ids ...int) *ServerUpdate {
	su.mutation.AddPlayerIDs(ids...)
	return su
}

// AddPlayers adds the players edges to Player.
func (su *ServerUpdate) AddPlayers(p ...*Player) *ServerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPlayerIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (su *ServerUpdate) Mutation() *ServerMutation {
	return su.mutation
}

// ClearMetadata clears the "metadata" edge to type Metadata.
func (su *ServerUpdate) ClearMetadata() *ServerUpdate {
	su.mutation.ClearMetadata()
	return su
}

// ClearServerType clears the "server_type" edge to type ServerType.
func (su *ServerUpdate) ClearServerType() *ServerUpdate {
	su.mutation.ClearServerType()
	return su
}

// ClearMapType clears the "map_type" edge to type MapType.
func (su *ServerUpdate) ClearMapType() *ServerUpdate {
	su.mutation.ClearMapType()
	return su
}

// ClearPlayers clears all "players" edges to type Player.
func (su *ServerUpdate) ClearPlayers() *ServerUpdate {
	su.mutation.ClearPlayers()
	return su
}

// RemovePlayerIDs removes the players edge to Player by ids.
func (su *ServerUpdate) RemovePlayerIDs(ids ...int) *ServerUpdate {
	su.mutation.RemovePlayerIDs(ids...)
	return su
}

// RemovePlayers removes players edges to Player.
func (su *ServerUpdate) RemovePlayers(p ...*Player) *ServerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePlayerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServerUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServerUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServerUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ServerUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := server.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *ServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   server.Table,
			Columns: server.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: server.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: server.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldName,
		})
	}
	if value, ok := su.mutation.APIUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPIUsername,
		})
	}
	if su.mutation.APIUsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldAPIUsername,
		})
	}
	if value, ok := su.mutation.APISecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPISecret,
		})
	}
	if su.mutation.APISecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldAPISecret,
		})
	}
	if value, ok := su.mutation.APIAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPIAddress,
		})
	}
	if su.mutation.APIAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldAPIAddress,
		})
	}
	if value, ok := su.mutation.APIPort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPIPort,
		})
	}
	if su.mutation.APIPortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldAPIPort,
		})
	}
	if su.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.MetadataTable,
			Columns: []string{server.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.MetadataTable,
			Columns: []string{server.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ServerTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.ServerTypeTable,
			Columns: []string{server.ServerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servertype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServerTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.ServerTypeTable,
			Columns: []string{server.ServerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MapTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.MapTypeTable,
			Columns: []string{server.MapTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MapTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.MapTypeTable,
			Columns: []string{server.MapTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   server.PlayersTable,
			Columns: server.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !su.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   server.PlayersTable,
			Columns: server.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   server.PlayersTable,
			Columns: server.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ServerUpdateOne is the builder for updating a single Server entity.
type ServerUpdateOne struct {
	config
	hooks    []Hook
	mutation *ServerMutation
}

// SetUpdatedAt sets the updated_at field.
func (suo *ServerUpdateOne) SetUpdatedAt(t time.Time) *ServerUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetName sets the name field.
func (suo *ServerUpdateOne) SetName(s string) *ServerUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetAPIUsername sets the api_username field.
func (suo *ServerUpdateOne) SetAPIUsername(s string) *ServerUpdateOne {
	suo.mutation.SetAPIUsername(s)
	return suo
}

// SetNillableAPIUsername sets the api_username field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableAPIUsername(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetAPIUsername(*s)
	}
	return suo
}

// ClearAPIUsername clears the value of api_username.
func (suo *ServerUpdateOne) ClearAPIUsername() *ServerUpdateOne {
	suo.mutation.ClearAPIUsername()
	return suo
}

// SetAPISecret sets the api_secret field.
func (suo *ServerUpdateOne) SetAPISecret(s string) *ServerUpdateOne {
	suo.mutation.SetAPISecret(s)
	return suo
}

// SetNillableAPISecret sets the api_secret field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableAPISecret(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetAPISecret(*s)
	}
	return suo
}

// ClearAPISecret clears the value of api_secret.
func (suo *ServerUpdateOne) ClearAPISecret() *ServerUpdateOne {
	suo.mutation.ClearAPISecret()
	return suo
}

// SetAPIAddress sets the api_address field.
func (suo *ServerUpdateOne) SetAPIAddress(s string) *ServerUpdateOne {
	suo.mutation.SetAPIAddress(s)
	return suo
}

// SetNillableAPIAddress sets the api_address field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableAPIAddress(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetAPIAddress(*s)
	}
	return suo
}

// ClearAPIAddress clears the value of api_address.
func (suo *ServerUpdateOne) ClearAPIAddress() *ServerUpdateOne {
	suo.mutation.ClearAPIAddress()
	return suo
}

// SetAPIPort sets the api_port field.
func (suo *ServerUpdateOne) SetAPIPort(s string) *ServerUpdateOne {
	suo.mutation.SetAPIPort(s)
	return suo
}

// SetNillableAPIPort sets the api_port field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableAPIPort(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetAPIPort(*s)
	}
	return suo
}

// ClearAPIPort clears the value of api_port.
func (suo *ServerUpdateOne) ClearAPIPort() *ServerUpdateOne {
	suo.mutation.ClearAPIPort()
	return suo
}

// SetMetadataID sets the metadata edge to Metadata by id.
func (suo *ServerUpdateOne) SetMetadataID(id int) *ServerUpdateOne {
	suo.mutation.SetMetadataID(id)
	return suo
}

// SetNillableMetadataID sets the metadata edge to Metadata by id if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableMetadataID(id *int) *ServerUpdateOne {
	if id != nil {
		suo = suo.SetMetadataID(*id)
	}
	return suo
}

// SetMetadata sets the metadata edge to Metadata.
func (suo *ServerUpdateOne) SetMetadata(m *Metadata) *ServerUpdateOne {
	return suo.SetMetadataID(m.ID)
}

// SetServerTypeID sets the server_type edge to ServerType by id.
func (suo *ServerUpdateOne) SetServerTypeID(id int) *ServerUpdateOne {
	suo.mutation.SetServerTypeID(id)
	return suo
}

// SetNillableServerTypeID sets the server_type edge to ServerType by id if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableServerTypeID(id *int) *ServerUpdateOne {
	if id != nil {
		suo = suo.SetServerTypeID(*id)
	}
	return suo
}

// SetServerType sets the server_type edge to ServerType.
func (suo *ServerUpdateOne) SetServerType(s *ServerType) *ServerUpdateOne {
	return suo.SetServerTypeID(s.ID)
}

// SetMapTypeID sets the map_type edge to MapType by id.
func (suo *ServerUpdateOne) SetMapTypeID(id int) *ServerUpdateOne {
	suo.mutation.SetMapTypeID(id)
	return suo
}

// SetNillableMapTypeID sets the map_type edge to MapType by id if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableMapTypeID(id *int) *ServerUpdateOne {
	if id != nil {
		suo = suo.SetMapTypeID(*id)
	}
	return suo
}

// SetMapType sets the map_type edge to MapType.
func (suo *ServerUpdateOne) SetMapType(m *MapType) *ServerUpdateOne {
	return suo.SetMapTypeID(m.ID)
}

// AddPlayerIDs adds the players edge to Player by ids.
func (suo *ServerUpdateOne) AddPlayerIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.AddPlayerIDs(ids...)
	return suo
}

// AddPlayers adds the players edges to Player.
func (suo *ServerUpdateOne) AddPlayers(p ...*Player) *ServerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPlayerIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (suo *ServerUpdateOne) Mutation() *ServerMutation {
	return suo.mutation
}

// ClearMetadata clears the "metadata" edge to type Metadata.
func (suo *ServerUpdateOne) ClearMetadata() *ServerUpdateOne {
	suo.mutation.ClearMetadata()
	return suo
}

// ClearServerType clears the "server_type" edge to type ServerType.
func (suo *ServerUpdateOne) ClearServerType() *ServerUpdateOne {
	suo.mutation.ClearServerType()
	return suo
}

// ClearMapType clears the "map_type" edge to type MapType.
func (suo *ServerUpdateOne) ClearMapType() *ServerUpdateOne {
	suo.mutation.ClearMapType()
	return suo
}

// ClearPlayers clears all "players" edges to type Player.
func (suo *ServerUpdateOne) ClearPlayers() *ServerUpdateOne {
	suo.mutation.ClearPlayers()
	return suo
}

// RemovePlayerIDs removes the players edge to Player by ids.
func (suo *ServerUpdateOne) RemovePlayerIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.RemovePlayerIDs(ids...)
	return suo
}

// RemovePlayers removes players edges to Player.
func (suo *ServerUpdateOne) RemovePlayers(p ...*Player) *ServerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePlayerIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *ServerUpdateOne) Save(ctx context.Context) (*Server, error) {
	var (
		err  error
		node *Server
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServerUpdateOne) SaveX(ctx context.Context) *Server {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServerUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServerUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ServerUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := server.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *ServerUpdateOne) sqlSave(ctx context.Context) (_node *Server, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   server.Table,
			Columns: server.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: server.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Server.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: server.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldName,
		})
	}
	if value, ok := suo.mutation.APIUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPIUsername,
		})
	}
	if suo.mutation.APIUsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldAPIUsername,
		})
	}
	if value, ok := suo.mutation.APISecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPISecret,
		})
	}
	if suo.mutation.APISecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldAPISecret,
		})
	}
	if value, ok := suo.mutation.APIAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPIAddress,
		})
	}
	if suo.mutation.APIAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldAPIAddress,
		})
	}
	if value, ok := suo.mutation.APIPort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: server.FieldAPIPort,
		})
	}
	if suo.mutation.APIPortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: server.FieldAPIPort,
		})
	}
	if suo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.MetadataTable,
			Columns: []string{server.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.MetadataTable,
			Columns: []string{server.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ServerTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.ServerTypeTable,
			Columns: []string{server.ServerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servertype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServerTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.ServerTypeTable,
			Columns: []string{server.ServerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: servertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MapTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.MapTypeTable,
			Columns: []string{server.MapTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MapTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   server.MapTypeTable,
			Columns: []string{server.MapTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: maptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   server.PlayersTable,
			Columns: server.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !suo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   server.PlayersTable,
			Columns: server.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   server.PlayersTable,
			Columns: server.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Server{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
