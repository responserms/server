// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/responserms/server/ent/servertype"
)

// ServerType is the model entity for the ServerType schema.
type ServerType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerTypeQuery when eager-loading is set.
	Edges ServerTypeEdges `json:"edges"`
}

// ServerTypeEdges holds the relations/edges for other nodes in the graph.
type ServerTypeEdges struct {
	// Servers holds the value of the servers edge.
	Servers []*Server
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServersOrErr returns the Servers value or an error if the edge
// was not loaded in eager-loading.
func (e ServerTypeEdges) ServersOrErr() ([]*Server, error) {
	if e.loadedTypes[0] {
		return e.Servers, nil
	}
	return nil, &NotLoadedError{edge: "servers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case servertype.FieldID:
			values[i] = &sql.NullInt64{}
		case servertype.FieldKey, servertype.FieldName, servertype.FieldDescription:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServerType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerType fields.
func (st *ServerType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servertype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case servertype.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				st.Key = value.String
			}
		case servertype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				st.Name = value.String
			}
		case servertype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				st.Description = new(string)
				*st.Description = value.String
			}
		}
	}
	return nil
}

// QueryServers queries the servers edge of the ServerType.
func (st *ServerType) QueryServers() *ServerQuery {
	return (&ServerTypeClient{config: st.config}).QueryServers(st)
}

// Update returns a builder for updating this ServerType.
// Note that, you need to call ServerType.Unwrap() before calling this method, if this ServerType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ServerType) Update() *ServerTypeUpdateOne {
	return (&ServerTypeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (st *ServerType) Unwrap() *ServerType {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServerType is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ServerType) String() string {
	var builder strings.Builder
	builder.WriteString("ServerType(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", key=")
	builder.WriteString(st.Key)
	builder.WriteString(", name=")
	builder.WriteString(st.Name)
	if v := st.Description; v != nil {
		builder.WriteString(", description=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ServerTypes is a parsable slice of ServerType.
type ServerTypes []*ServerType

func (st ServerTypes) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
