// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/server"
	"github.com/responserms/server/ent/servertype"
)

// ServerTypeCreate is the builder for creating a ServerType entity.
type ServerTypeCreate struct {
	config
	mutation *ServerTypeMutation
	hooks    []Hook
}

// SetKey sets the key field.
func (stc *ServerTypeCreate) SetKey(s string) *ServerTypeCreate {
	stc.mutation.SetKey(s)
	return stc
}

// SetName sets the name field.
func (stc *ServerTypeCreate) SetName(s string) *ServerTypeCreate {
	stc.mutation.SetName(s)
	return stc
}

// SetDescription sets the description field.
func (stc *ServerTypeCreate) SetDescription(s string) *ServerTypeCreate {
	stc.mutation.SetDescription(s)
	return stc
}

// SetNillableDescription sets the description field if the given value is not nil.
func (stc *ServerTypeCreate) SetNillableDescription(s *string) *ServerTypeCreate {
	if s != nil {
		stc.SetDescription(*s)
	}
	return stc
}

// AddServerIDs adds the servers edge to Server by ids.
func (stc *ServerTypeCreate) AddServerIDs(ids ...int) *ServerTypeCreate {
	stc.mutation.AddServerIDs(ids...)
	return stc
}

// AddServers adds the servers edges to Server.
func (stc *ServerTypeCreate) AddServers(s ...*Server) *ServerTypeCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddServerIDs(ids...)
}

// Mutation returns the ServerTypeMutation object of the builder.
func (stc *ServerTypeCreate) Mutation() *ServerTypeMutation {
	return stc.mutation
}

// Save creates the ServerType in the database.
func (stc *ServerTypeCreate) Save(ctx context.Context) (*ServerType, error) {
	var (
		err  error
		node *ServerType
	)
	if len(stc.hooks) == 0 {
		if err = stc.check(); err != nil {
			return nil, err
		}
		node, err = stc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stc.check(); err != nil {
				return nil, err
			}
			stc.mutation = mutation
			node, err = stc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stc.hooks) - 1; i >= 0; i-- {
			mut = stc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (stc *ServerTypeCreate) SaveX(ctx context.Context) *ServerType {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (stc *ServerTypeCreate) check() error {
	if _, ok := stc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New("ent: missing required field \"key\"")}
	}
	if _, ok := stc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	return nil
}

func (stc *ServerTypeCreate) sqlSave(ctx context.Context) (*ServerType, error) {
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (stc *ServerTypeCreate) createSpec() (*ServerType, *sqlgraph.CreateSpec) {
	var (
		_node = &ServerType{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: servertype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: servertype.FieldID,
			},
		}
	)
	if value, ok := stc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertype.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := stc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertype.FieldName,
		})
		_node.Name = value
	}
	if value, ok := stc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertype.FieldDescription,
		})
		_node.Description = &value
	}
	if nodes := stc.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServerTypeCreateBulk is the builder for creating a bulk of ServerType entities.
type ServerTypeCreateBulk struct {
	config
	builders []*ServerTypeCreate
}

// Save creates the ServerType entities in the database.
func (stcb *ServerTypeCreateBulk) Save(ctx context.Context) ([]*ServerType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*ServerType, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (stcb *ServerTypeCreateBulk) SaveX(ctx context.Context) []*ServerType {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
