// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/predicate"
	"github.com/responserms/server/ent/server"
	"github.com/responserms/server/ent/servertype"
)

// ServerTypeUpdate is the builder for updating ServerType entities.
type ServerTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ServerTypeMutation
}

// Where adds a new predicate for the builder.
func (stu *ServerTypeUpdate) Where(ps ...predicate.ServerType) *ServerTypeUpdate {
	stu.mutation.predicates = append(stu.mutation.predicates, ps...)
	return stu
}

// SetName sets the name field.
func (stu *ServerTypeUpdate) SetName(s string) *ServerTypeUpdate {
	stu.mutation.SetName(s)
	return stu
}

// SetDescription sets the description field.
func (stu *ServerTypeUpdate) SetDescription(s string) *ServerTypeUpdate {
	stu.mutation.SetDescription(s)
	return stu
}

// SetNillableDescription sets the description field if the given value is not nil.
func (stu *ServerTypeUpdate) SetNillableDescription(s *string) *ServerTypeUpdate {
	if s != nil {
		stu.SetDescription(*s)
	}
	return stu
}

// ClearDescription clears the value of description.
func (stu *ServerTypeUpdate) ClearDescription() *ServerTypeUpdate {
	stu.mutation.ClearDescription()
	return stu
}

// AddServerIDs adds the servers edge to Server by ids.
func (stu *ServerTypeUpdate) AddServerIDs(ids ...int) *ServerTypeUpdate {
	stu.mutation.AddServerIDs(ids...)
	return stu
}

// AddServers adds the servers edges to Server.
func (stu *ServerTypeUpdate) AddServers(s ...*Server) *ServerTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddServerIDs(ids...)
}

// Mutation returns the ServerTypeMutation object of the builder.
func (stu *ServerTypeUpdate) Mutation() *ServerTypeMutation {
	return stu.mutation
}

// ClearServers clears all "servers" edges to type Server.
func (stu *ServerTypeUpdate) ClearServers() *ServerTypeUpdate {
	stu.mutation.ClearServers()
	return stu
}

// RemoveServerIDs removes the servers edge to Server by ids.
func (stu *ServerTypeUpdate) RemoveServerIDs(ids ...int) *ServerTypeUpdate {
	stu.mutation.RemoveServerIDs(ids...)
	return stu
}

// RemoveServers removes servers edges to Server.
func (stu *ServerTypeUpdate) RemoveServers(s ...*Server) *ServerTypeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveServerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ServerTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(stu.hooks) == 0 {
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ServerTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ServerTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ServerTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *ServerTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servertype.Table,
			Columns: servertype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: servertype.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertype.FieldName,
		})
	}
	if value, ok := stu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertype.FieldDescription,
		})
	}
	if stu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: servertype.FieldDescription,
		})
	}
	if stu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedServersIDs(); len(nodes) > 0 && !stu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servertype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ServerTypeUpdateOne is the builder for updating a single ServerType entity.
type ServerTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *ServerTypeMutation
}

// SetName sets the name field.
func (stuo *ServerTypeUpdateOne) SetName(s string) *ServerTypeUpdateOne {
	stuo.mutation.SetName(s)
	return stuo
}

// SetDescription sets the description field.
func (stuo *ServerTypeUpdateOne) SetDescription(s string) *ServerTypeUpdateOne {
	stuo.mutation.SetDescription(s)
	return stuo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (stuo *ServerTypeUpdateOne) SetNillableDescription(s *string) *ServerTypeUpdateOne {
	if s != nil {
		stuo.SetDescription(*s)
	}
	return stuo
}

// ClearDescription clears the value of description.
func (stuo *ServerTypeUpdateOne) ClearDescription() *ServerTypeUpdateOne {
	stuo.mutation.ClearDescription()
	return stuo
}

// AddServerIDs adds the servers edge to Server by ids.
func (stuo *ServerTypeUpdateOne) AddServerIDs(ids ...int) *ServerTypeUpdateOne {
	stuo.mutation.AddServerIDs(ids...)
	return stuo
}

// AddServers adds the servers edges to Server.
func (stuo *ServerTypeUpdateOne) AddServers(s ...*Server) *ServerTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddServerIDs(ids...)
}

// Mutation returns the ServerTypeMutation object of the builder.
func (stuo *ServerTypeUpdateOne) Mutation() *ServerTypeMutation {
	return stuo.mutation
}

// ClearServers clears all "servers" edges to type Server.
func (stuo *ServerTypeUpdateOne) ClearServers() *ServerTypeUpdateOne {
	stuo.mutation.ClearServers()
	return stuo
}

// RemoveServerIDs removes the servers edge to Server by ids.
func (stuo *ServerTypeUpdateOne) RemoveServerIDs(ids ...int) *ServerTypeUpdateOne {
	stuo.mutation.RemoveServerIDs(ids...)
	return stuo
}

// RemoveServers removes servers edges to Server.
func (stuo *ServerTypeUpdateOne) RemoveServers(s ...*Server) *ServerTypeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveServerIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (stuo *ServerTypeUpdateOne) Save(ctx context.Context) (*ServerType, error) {
	var (
		err  error
		node *ServerType
	)
	if len(stuo.hooks) == 0 {
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ServerTypeUpdateOne) SaveX(ctx context.Context) *ServerType {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ServerTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ServerTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *ServerTypeUpdateOne) sqlSave(ctx context.Context) (_node *ServerType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servertype.Table,
			Columns: servertype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: servertype.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ServerType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := stuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertype.FieldName,
		})
	}
	if value, ok := stuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servertype.FieldDescription,
		})
	}
	if stuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: servertype.FieldDescription,
		})
	}
	if stuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedServersIDs(); len(nodes) > 0 && !stuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   servertype.ServersTable,
			Columns: []string{servertype.ServersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServerType{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servertype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
