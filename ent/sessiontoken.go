// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/responserms/server/ent/sessiontoken"
	"github.com/responserms/server/ent/user"
)

// SessionToken is the model entity for the SessionToken schema.
type SessionToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// BlockedAt holds the value of the "blocked_at" field.
	BlockedAt *time.Time `json:"blocked_at,omitempty"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt *time.Time `json:"expired_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SessionTokenQuery when eager-loading is set.
	Edges               SessionTokenEdges `json:"edges"`
	user_session_tokens *int
}

// SessionTokenEdges holds the relations/edges for other nodes in the graph.
type SessionTokenEdges struct {
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionTokenEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SessionToken) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sessiontoken.FieldID:
			values[i] = &sql.NullInt64{}
		case sessiontoken.FieldCreatedAt, sessiontoken.FieldUpdatedAt, sessiontoken.FieldBlockedAt, sessiontoken.FieldExpiredAt:
			values[i] = &sql.NullTime{}
		case sessiontoken.ForeignKeys[0]: // user_session_tokens
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type SessionToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SessionToken fields.
func (st *SessionToken) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sessiontoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case sessiontoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		case sessiontoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Time
			}
		case sessiontoken.FieldBlockedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field blocked_at", values[i])
			} else if value.Valid {
				st.BlockedAt = new(time.Time)
				*st.BlockedAt = value.Time
			}
		case sessiontoken.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				st.ExpiredAt = new(time.Time)
				*st.ExpiredAt = value.Time
			}
		case sessiontoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_session_tokens", value)
			} else if value.Valid {
				st.user_session_tokens = new(int)
				*st.user_session_tokens = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the user edge of the SessionToken.
func (st *SessionToken) QueryUser() *UserQuery {
	return (&SessionTokenClient{config: st.config}).QueryUser(st)
}

// Update returns a builder for updating this SessionToken.
// Note that, you need to call SessionToken.Unwrap() before calling this method, if this SessionToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SessionToken) Update() *SessionTokenUpdateOne {
	return (&SessionTokenClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (st *SessionToken) Unwrap() *SessionToken {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SessionToken is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SessionToken) String() string {
	var builder strings.Builder
	builder.WriteString("SessionToken(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(st.UpdatedAt.Format(time.ANSIC))
	if v := st.BlockedAt; v != nil {
		builder.WriteString(", blocked_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := st.ExpiredAt; v != nil {
		builder.WriteString(", expired_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SessionTokens is a parsable slice of SessionToken.
type SessionTokens []*SessionToken

func (st SessionTokens) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
