// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/sessiontoken"
	"github.com/responserms/server/ent/user"
)

// SessionTokenCreate is the builder for creating a SessionToken entity.
type SessionTokenCreate struct {
	config
	mutation *SessionTokenMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (stc *SessionTokenCreate) SetCreatedAt(t time.Time) *SessionTokenCreate {
	stc.mutation.SetCreatedAt(t)
	return stc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (stc *SessionTokenCreate) SetNillableCreatedAt(t *time.Time) *SessionTokenCreate {
	if t != nil {
		stc.SetCreatedAt(*t)
	}
	return stc
}

// SetUpdatedAt sets the updated_at field.
func (stc *SessionTokenCreate) SetUpdatedAt(t time.Time) *SessionTokenCreate {
	stc.mutation.SetUpdatedAt(t)
	return stc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (stc *SessionTokenCreate) SetNillableUpdatedAt(t *time.Time) *SessionTokenCreate {
	if t != nil {
		stc.SetUpdatedAt(*t)
	}
	return stc
}

// SetBlockedAt sets the blocked_at field.
func (stc *SessionTokenCreate) SetBlockedAt(t time.Time) *SessionTokenCreate {
	stc.mutation.SetBlockedAt(t)
	return stc
}

// SetNillableBlockedAt sets the blocked_at field if the given value is not nil.
func (stc *SessionTokenCreate) SetNillableBlockedAt(t *time.Time) *SessionTokenCreate {
	if t != nil {
		stc.SetBlockedAt(*t)
	}
	return stc
}

// SetExpiredAt sets the expired_at field.
func (stc *SessionTokenCreate) SetExpiredAt(t time.Time) *SessionTokenCreate {
	stc.mutation.SetExpiredAt(t)
	return stc
}

// SetNillableExpiredAt sets the expired_at field if the given value is not nil.
func (stc *SessionTokenCreate) SetNillableExpiredAt(t *time.Time) *SessionTokenCreate {
	if t != nil {
		stc.SetExpiredAt(*t)
	}
	return stc
}

// SetUserID sets the user edge to User by id.
func (stc *SessionTokenCreate) SetUserID(id int) *SessionTokenCreate {
	stc.mutation.SetUserID(id)
	return stc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (stc *SessionTokenCreate) SetNillableUserID(id *int) *SessionTokenCreate {
	if id != nil {
		stc = stc.SetUserID(*id)
	}
	return stc
}

// SetUser sets the user edge to User.
func (stc *SessionTokenCreate) SetUser(u *User) *SessionTokenCreate {
	return stc.SetUserID(u.ID)
}

// Mutation returns the SessionTokenMutation object of the builder.
func (stc *SessionTokenCreate) Mutation() *SessionTokenMutation {
	return stc.mutation
}

// Save creates the SessionToken in the database.
func (stc *SessionTokenCreate) Save(ctx context.Context) (*SessionToken, error) {
	var (
		err  error
		node *SessionToken
	)
	stc.defaults()
	if len(stc.hooks) == 0 {
		if err = stc.check(); err != nil {
			return nil, err
		}
		node, err = stc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stc.check(); err != nil {
				return nil, err
			}
			stc.mutation = mutation
			node, err = stc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stc.hooks) - 1; i >= 0; i-- {
			mut = stc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SessionTokenCreate) SaveX(ctx context.Context) *SessionToken {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (stc *SessionTokenCreate) defaults() {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		v := sessiontoken.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		v := sessiontoken.DefaultUpdatedAt()
		stc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SessionTokenCreate) check() error {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (stc *SessionTokenCreate) sqlSave(ctx context.Context) (*SessionToken, error) {
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (stc *SessionTokenCreate) createSpec() (*SessionToken, *sqlgraph.CreateSpec) {
	var (
		_node = &SessionToken{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sessiontoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sessiontoken.FieldID,
			},
		}
	)
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sessiontoken.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := stc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sessiontoken.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := stc.mutation.BlockedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sessiontoken.FieldBlockedAt,
		})
		_node.BlockedAt = &value
	}
	if value, ok := stc.mutation.ExpiredAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sessiontoken.FieldExpiredAt,
		})
		_node.ExpiredAt = &value
	}
	if nodes := stc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sessiontoken.UserTable,
			Columns: []string{sessiontoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SessionTokenCreateBulk is the builder for creating a bulk of SessionToken entities.
type SessionTokenCreateBulk struct {
	config
	builders []*SessionTokenCreate
}

// Save creates the SessionToken entities in the database.
func (stcb *SessionTokenCreateBulk) Save(ctx context.Context) ([]*SessionToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SessionToken, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (stcb *SessionTokenCreateBulk) SaveX(ctx context.Context) []*SessionToken {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
