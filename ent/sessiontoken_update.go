// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/responserms/server/ent/predicate"
	"github.com/responserms/server/ent/sessiontoken"
	"github.com/responserms/server/ent/user"
)

// SessionTokenUpdate is the builder for updating SessionToken entities.
type SessionTokenUpdate struct {
	config
	hooks    []Hook
	mutation *SessionTokenMutation
}

// Where adds a new predicate for the builder.
func (stu *SessionTokenUpdate) Where(ps ...predicate.SessionToken) *SessionTokenUpdate {
	stu.mutation.predicates = append(stu.mutation.predicates, ps...)
	return stu
}

// SetUpdatedAt sets the updated_at field.
func (stu *SessionTokenUpdate) SetUpdatedAt(t time.Time) *SessionTokenUpdate {
	stu.mutation.SetUpdatedAt(t)
	return stu
}

// SetBlockedAt sets the blocked_at field.
func (stu *SessionTokenUpdate) SetBlockedAt(t time.Time) *SessionTokenUpdate {
	stu.mutation.SetBlockedAt(t)
	return stu
}

// SetNillableBlockedAt sets the blocked_at field if the given value is not nil.
func (stu *SessionTokenUpdate) SetNillableBlockedAt(t *time.Time) *SessionTokenUpdate {
	if t != nil {
		stu.SetBlockedAt(*t)
	}
	return stu
}

// ClearBlockedAt clears the value of blocked_at.
func (stu *SessionTokenUpdate) ClearBlockedAt() *SessionTokenUpdate {
	stu.mutation.ClearBlockedAt()
	return stu
}

// SetExpiredAt sets the expired_at field.
func (stu *SessionTokenUpdate) SetExpiredAt(t time.Time) *SessionTokenUpdate {
	stu.mutation.SetExpiredAt(t)
	return stu
}

// SetNillableExpiredAt sets the expired_at field if the given value is not nil.
func (stu *SessionTokenUpdate) SetNillableExpiredAt(t *time.Time) *SessionTokenUpdate {
	if t != nil {
		stu.SetExpiredAt(*t)
	}
	return stu
}

// ClearExpiredAt clears the value of expired_at.
func (stu *SessionTokenUpdate) ClearExpiredAt() *SessionTokenUpdate {
	stu.mutation.ClearExpiredAt()
	return stu
}

// SetUserID sets the user edge to User by id.
func (stu *SessionTokenUpdate) SetUserID(id int) *SessionTokenUpdate {
	stu.mutation.SetUserID(id)
	return stu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (stu *SessionTokenUpdate) SetNillableUserID(id *int) *SessionTokenUpdate {
	if id != nil {
		stu = stu.SetUserID(*id)
	}
	return stu
}

// SetUser sets the user edge to User.
func (stu *SessionTokenUpdate) SetUser(u *User) *SessionTokenUpdate {
	return stu.SetUserID(u.ID)
}

// Mutation returns the SessionTokenMutation object of the builder.
func (stu *SessionTokenUpdate) Mutation() *SessionTokenMutation {
	return stu.mutation
}

// ClearUser clears the "user" edge to type User.
func (stu *SessionTokenUpdate) ClearUser() *SessionTokenUpdate {
	stu.mutation.ClearUser()
	return stu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SessionTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	stu.defaults()
	if len(stu.hooks) == 0 {
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SessionTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SessionTokenUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SessionTokenUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SessionTokenUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		v := sessiontoken.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
}

func (stu *SessionTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sessiontoken.Table,
			Columns: sessiontoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sessiontoken.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sessiontoken.FieldUpdatedAt,
		})
	}
	if value, ok := stu.mutation.BlockedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sessiontoken.FieldBlockedAt,
		})
	}
	if stu.mutation.BlockedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sessiontoken.FieldBlockedAt,
		})
	}
	if value, ok := stu.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sessiontoken.FieldExpiredAt,
		})
	}
	if stu.mutation.ExpiredAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sessiontoken.FieldExpiredAt,
		})
	}
	if stu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sessiontoken.UserTable,
			Columns: []string{sessiontoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sessiontoken.UserTable,
			Columns: []string{sessiontoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sessiontoken.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SessionTokenUpdateOne is the builder for updating a single SessionToken entity.
type SessionTokenUpdateOne struct {
	config
	hooks    []Hook
	mutation *SessionTokenMutation
}

// SetUpdatedAt sets the updated_at field.
func (stuo *SessionTokenUpdateOne) SetUpdatedAt(t time.Time) *SessionTokenUpdateOne {
	stuo.mutation.SetUpdatedAt(t)
	return stuo
}

// SetBlockedAt sets the blocked_at field.
func (stuo *SessionTokenUpdateOne) SetBlockedAt(t time.Time) *SessionTokenUpdateOne {
	stuo.mutation.SetBlockedAt(t)
	return stuo
}

// SetNillableBlockedAt sets the blocked_at field if the given value is not nil.
func (stuo *SessionTokenUpdateOne) SetNillableBlockedAt(t *time.Time) *SessionTokenUpdateOne {
	if t != nil {
		stuo.SetBlockedAt(*t)
	}
	return stuo
}

// ClearBlockedAt clears the value of blocked_at.
func (stuo *SessionTokenUpdateOne) ClearBlockedAt() *SessionTokenUpdateOne {
	stuo.mutation.ClearBlockedAt()
	return stuo
}

// SetExpiredAt sets the expired_at field.
func (stuo *SessionTokenUpdateOne) SetExpiredAt(t time.Time) *SessionTokenUpdateOne {
	stuo.mutation.SetExpiredAt(t)
	return stuo
}

// SetNillableExpiredAt sets the expired_at field if the given value is not nil.
func (stuo *SessionTokenUpdateOne) SetNillableExpiredAt(t *time.Time) *SessionTokenUpdateOne {
	if t != nil {
		stuo.SetExpiredAt(*t)
	}
	return stuo
}

// ClearExpiredAt clears the value of expired_at.
func (stuo *SessionTokenUpdateOne) ClearExpiredAt() *SessionTokenUpdateOne {
	stuo.mutation.ClearExpiredAt()
	return stuo
}

// SetUserID sets the user edge to User by id.
func (stuo *SessionTokenUpdateOne) SetUserID(id int) *SessionTokenUpdateOne {
	stuo.mutation.SetUserID(id)
	return stuo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (stuo *SessionTokenUpdateOne) SetNillableUserID(id *int) *SessionTokenUpdateOne {
	if id != nil {
		stuo = stuo.SetUserID(*id)
	}
	return stuo
}

// SetUser sets the user edge to User.
func (stuo *SessionTokenUpdateOne) SetUser(u *User) *SessionTokenUpdateOne {
	return stuo.SetUserID(u.ID)
}

// Mutation returns the SessionTokenMutation object of the builder.
func (stuo *SessionTokenUpdateOne) Mutation() *SessionTokenMutation {
	return stuo.mutation
}

// ClearUser clears the "user" edge to type User.
func (stuo *SessionTokenUpdateOne) ClearUser() *SessionTokenUpdateOne {
	stuo.mutation.ClearUser()
	return stuo
}

// Save executes the query and returns the updated entity.
func (stuo *SessionTokenUpdateOne) Save(ctx context.Context) (*SessionToken, error) {
	var (
		err  error
		node *SessionToken
	)
	stuo.defaults()
	if len(stuo.hooks) == 0 {
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SessionTokenUpdateOne) SaveX(ctx context.Context) *SessionToken {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SessionTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SessionTokenUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SessionTokenUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		v := sessiontoken.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
}

func (stuo *SessionTokenUpdateOne) sqlSave(ctx context.Context) (_node *SessionToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sessiontoken.Table,
			Columns: sessiontoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sessiontoken.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SessionToken.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sessiontoken.FieldUpdatedAt,
		})
	}
	if value, ok := stuo.mutation.BlockedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sessiontoken.FieldBlockedAt,
		})
	}
	if stuo.mutation.BlockedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sessiontoken.FieldBlockedAt,
		})
	}
	if value, ok := stuo.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sessiontoken.FieldExpiredAt,
		})
	}
	if stuo.mutation.ExpiredAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sessiontoken.FieldExpiredAt,
		})
	}
	if stuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sessiontoken.UserTable,
			Columns: []string{sessiontoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sessiontoken.UserTable,
			Columns: []string{sessiontoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SessionToken{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sessiontoken.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
