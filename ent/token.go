// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/responserms/server/ent/session"
	"github.com/responserms/server/ent/token"
)

// Token is the model entity for the Token schema.
type Token struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt time.Time `json:"expired_at,omitempty"`
	// BlockedAt holds the value of the "blocked_at" field.
	BlockedAt *time.Time `json:"blocked_at,omitempty"`
	// Claims holds the value of the "claims" field.
	Claims string `json:"claims,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TokenQuery when eager-loading is set.
	Edges TokenEdges `json:"edges"`
}

// TokenEdges holds the relations/edges for other nodes in the graph.
type TokenEdges struct {
	// Session holds the value of the session edge.
	Session *Session
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TokenEdges) SessionOrErr() (*Session, error) {
	if e.loadedTypes[0] {
		if e.Session == nil {
			// The edge session was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: session.Label}
		}
		return e.Session, nil
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Token) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case token.FieldID:
			values[i] = &sql.NullInt64{}
		case token.FieldClaims:
			values[i] = &sql.NullString{}
		case token.FieldExpiredAt, token.FieldBlockedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Token", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Token fields.
func (t *Token) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case token.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case token.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				t.ExpiredAt = value.Time
			}
		case token.FieldBlockedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field blocked_at", values[i])
			} else if value.Valid {
				t.BlockedAt = new(time.Time)
				*t.BlockedAt = value.Time
			}
		case token.FieldClaims:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims", values[i])
			} else if value.Valid {
				t.Claims = value.String
			}
		}
	}
	return nil
}

// QuerySession queries the session edge of the Token.
func (t *Token) QuerySession() *SessionQuery {
	return (&TokenClient{config: t.config}).QuerySession(t)
}

// Update returns a builder for updating this Token.
// Note that, you need to call Token.Unwrap() before calling this method, if this Token
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Token) Update() *TokenUpdateOne {
	return (&TokenClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Token) Unwrap() *Token {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Token is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Token) String() string {
	var builder strings.Builder
	builder.WriteString("Token(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", expired_at=")
	builder.WriteString(t.ExpiredAt.Format(time.ANSIC))
	if v := t.BlockedAt; v != nil {
		builder.WriteString(", blocked_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", claims=")
	builder.WriteString(t.Claims)
	builder.WriteByte(')')
	return builder.String()
}

// Tokens is a parsable slice of Token.
type Tokens []*Token

func (t Tokens) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
