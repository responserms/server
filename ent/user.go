// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/responserms/server/ent/activation"
	"github.com/responserms/server/ent/metadata"
	"github.com/responserms/server/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password *string `json:"-"`
	// IsSystem holds the value of the "is_system" field.
	IsSystem bool `json:"is_system,omitempty"`
	// DisabledAt holds the value of the "disabled_at" field.
	DisabledAt *time.Time `json:"disabled_at,omitempty"`
	// DisabledReason holds the value of the "disabled_reason" field.
	DisabledReason *string `json:"disabled_reason,omitempty"`
	// ActivatedAt holds the value of the "activated_at" field.
	ActivatedAt *time.Time `json:"activated_at,omitempty"`
	// ActivationComment holds the value of the "activation_comment" field.
	ActivationComment *string `json:"activation_comment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges           UserEdges `json:"edges"`
	activation_user *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata
	// Sessions holds the value of the sessions edge.
	Sessions []*Session
	// Activation holds the value of the activation edge.
	Activation *Activation
	// Activations holds the value of the activations edge.
	Activations []*Activation
	// Players holds the value of the players edge.
	Players []*Player
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) MetadataOrErr() (*Metadata, error) {
	if e.loadedTypes[0] {
		if e.Metadata == nil {
			// The edge metadata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metadata.Label}
		}
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[1] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// ActivationOrErr returns the Activation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) ActivationOrErr() (*Activation, error) {
	if e.loadedTypes[2] {
		if e.Activation == nil {
			// The edge activation was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: activation.Label}
		}
		return e.Activation, nil
	}
	return nil, &NotLoadedError{edge: "activation"}
}

// ActivationsOrErr returns the Activations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ActivationsOrErr() ([]*Activation, error) {
	if e.loadedTypes[3] {
		return e.Activations, nil
	}
	return nil, &NotLoadedError{edge: "activations"}
}

// PlayersOrErr returns the Players value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PlayersOrErr() ([]*Player, error) {
	if e.loadedTypes[4] {
		return e.Players, nil
	}
	return nil, &NotLoadedError{edge: "players"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsSystem:
			values[i] = &sql.NullBool{}
		case user.FieldID:
			values[i] = &sql.NullInt64{}
		case user.FieldName, user.FieldEmail, user.FieldPassword, user.FieldDisabledReason, user.FieldActivationComment:
			values[i] = &sql.NullString{}
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDisabledAt, user.FieldActivatedAt:
			values[i] = &sql.NullTime{}
		case user.ForeignKeys[0]: // activation_user
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = new(string)
				*u.Password = value.String
			}
		case user.FieldIsSystem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_system", values[i])
			} else if value.Valid {
				u.IsSystem = value.Bool
			}
		case user.FieldDisabledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field disabled_at", values[i])
			} else if value.Valid {
				u.DisabledAt = new(time.Time)
				*u.DisabledAt = value.Time
			}
		case user.FieldDisabledReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field disabled_reason", values[i])
			} else if value.Valid {
				u.DisabledReason = new(string)
				*u.DisabledReason = value.String
			}
		case user.FieldActivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activated_at", values[i])
			} else if value.Valid {
				u.ActivatedAt = new(time.Time)
				*u.ActivatedAt = value.Time
			}
		case user.FieldActivationComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activation_comment", values[i])
			} else if value.Valid {
				u.ActivationComment = new(string)
				*u.ActivationComment = value.String
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field activation_user", value)
			} else if value.Valid {
				u.activation_user = new(int)
				*u.activation_user = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetadata queries the metadata edge of the User.
func (u *User) QueryMetadata() *MetadataQuery {
	return (&UserClient{config: u.config}).QueryMetadata(u)
}

// QuerySessions queries the sessions edge of the User.
func (u *User) QuerySessions() *SessionQuery {
	return (&UserClient{config: u.config}).QuerySessions(u)
}

// QueryActivation queries the activation edge of the User.
func (u *User) QueryActivation() *ActivationQuery {
	return (&UserClient{config: u.config}).QueryActivation(u)
}

// QueryActivations queries the activations edge of the User.
func (u *User) QueryActivations() *ActivationQuery {
	return (&UserClient{config: u.config}).QueryActivations(u)
}

// QueryPlayers queries the players edge of the User.
func (u *User) QueryPlayers() *PlayerQuery {
	return (&UserClient{config: u.config}).QueryPlayers(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", is_system=")
	builder.WriteString(fmt.Sprintf("%v", u.IsSystem))
	if v := u.DisabledAt; v != nil {
		builder.WriteString(", disabled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := u.DisabledReason; v != nil {
		builder.WriteString(", disabled_reason=")
		builder.WriteString(*v)
	}
	if v := u.ActivatedAt; v != nil {
		builder.WriteString(", activated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := u.ActivationComment; v != nil {
		builder.WriteString(", activation_comment=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
