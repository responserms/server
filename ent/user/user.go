// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldIsSystem holds the string denoting the is_system field in the database.
	FieldIsSystem = "is_system"
	// FieldDisabledAt holds the string denoting the disabled_at field in the database.
	FieldDisabledAt = "disabled_at"
	// FieldDisabledReason holds the string denoting the disabled_reason field in the database.
	FieldDisabledReason = "disabled_reason"
	// FieldActivatedAt holds the string denoting the activated_at field in the database.
	FieldActivatedAt = "activated_at"
	// FieldActivationComment holds the string denoting the activation_comment field in the database.
	FieldActivationComment = "activation_comment"

	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeActivation holds the string denoting the activation edge name in mutations.
	EdgeActivation = "activation"
	// EdgeActivations holds the string denoting the activations edge name in mutations.
	EdgeActivations = "activations"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"

	// Table holds the table name of the user in the database.
	Table = "users"
	// MetadataTable is the table the holds the metadata relation/edge.
	MetadataTable = "metadata"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "user_metadata"
	// SessionsTable is the table the holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "user_sessions"
	// ActivationTable is the table the holds the activation relation/edge.
	ActivationTable = "users"
	// ActivationInverseTable is the table name for the Activation entity.
	// It exists in this package in order to avoid circular dependency with the "activation" package.
	ActivationInverseTable = "activations"
	// ActivationColumn is the table column denoting the activation relation/edge.
	ActivationColumn = "activation_user"
	// ActivationsTable is the table the holds the activations relation/edge. The primary key declared below.
	ActivationsTable = "activation_actor"
	// ActivationsInverseTable is the table name for the Activation entity.
	// It exists in this package in order to avoid circular dependency with the "activation" package.
	ActivationsInverseTable = "activations"
	// PlayersTable is the table the holds the players relation/edge.
	PlayersTable = "players"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
	// PlayersColumn is the table column denoting the players relation/edge.
	PlayersColumn = "player_user"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldIsSystem,
	FieldDisabledAt,
	FieldDisabledReason,
	FieldActivatedAt,
	FieldActivationComment,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the User type.
var ForeignKeys = []string{
	"activation_user",
}

var (
	// ActivationsPrimaryKey and ActivationsColumn2 are the table columns denoting the
	// primary key for the activations relation (M2M).
	ActivationsPrimaryKey = []string{"activation_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsSystem holds the default value on creation for the is_system field.
	DefaultIsSystem bool
)
